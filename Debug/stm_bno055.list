
stm_bno055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800592c  0800592c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800592c  0800592c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000007c  080059b0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080059b0  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ceae  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f40  00000000  00000000  0002cf5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b78  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002fa18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000189fc  00000000  00000000  00030488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098f4  00000000  00000000  00048e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008573e  00000000  00000000  00052778  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003740  00000000  00000000  000d7f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005600 	.word	0x08005600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005600 	.word	0x08005600

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f000 fa02 	bl	8000e74 <bno055_writeData>
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4619      	mov	r1, r3
 8000a86:	203d      	movs	r0, #61	; 0x3d
 8000a88:	f000 f9f4 	bl	8000e74 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d103      	bne.n	8000a9a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000a92:	2013      	movs	r0, #19
 8000a94:	f000 f9e2 	bl	8000e5c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000a98:	e002      	b.n	8000aa0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 f9de 	bl	8000e5c <bno055_delay>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ffe3 	bl	8000a78 <bno055_setOperationMode>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000aba:	200c      	movs	r0, #12
 8000abc:	f7ff ffdc 	bl	8000a78 <bno055_setOperationMode>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000ac8:	2120      	movs	r1, #32
 8000aca:	203f      	movs	r0, #63	; 0x3f
 8000acc:	f000 f9d2 	bl	8000e74 <bno055_writeData>
  bno055_delay(700);
 8000ad0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000ad4:	f000 f9c2 	bl	8000e5c <bno055_delay>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  bno055_reset();
 8000ae2:	f7ff ffef 	bl	8000ac4 <bno055_reset>

  uint8_t id = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 faab 	bl	800104c <bno055_readData>
  if (id != BNO055_ID) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2ba0      	cmp	r3, #160	; 0xa0
 8000afa:	d004      	beq.n	8000b06 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <bno055_setup+0x4c>)
 8000b02:	f003 fe35 	bl	8004770 <iprintf>
  }
  bno055_setPage(0);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff ffa8 	bl	8000a5c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	203f      	movs	r0, #63	; 0x3f
 8000b10:	f000 f9b0 	bl	8000e74 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000b14:	f7ff ffc8 	bl	8000aa8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f000 f99f 	bl	8000e5c <bno055_delay>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08005618 	.word	0x08005618

08000b2c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b30:	b09f      	sub	sp, #124	; 0x7c
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff8e 	bl	8000a5c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d108      	bne.n	8000b5a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000b48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b50:	2208      	movs	r2, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fa7a 	bl	800104c <bno055_readData>
 8000b58:	e007      	b.n	8000b6a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000b5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b62:	2206      	movs	r2, #6
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa71 	bl	800104c <bno055_readData>

  double scale = 1;
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	4c8b      	ldr	r4, [pc, #556]	; (8000d9c <bno055_getVector+0x270>)
 8000b70:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b78:	2b0e      	cmp	r3, #14
 8000b7a:	d109      	bne.n	8000b90 <bno055_getVector+0x64>
    scale = magScale;
 8000b7c:	4b88      	ldr	r3, [pc, #544]	; (8000da0 <bno055_getVector+0x274>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fcb7 	bl	80004f4 <__aeabi_ui2d>
 8000b86:	4603      	mov	r3, r0
 8000b88:	460c      	mov	r4, r1
 8000b8a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000b8e:	e03e      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d007      	beq.n	8000ba8 <bno055_getVector+0x7c>
 8000b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b9c:	2b28      	cmp	r3, #40	; 0x28
 8000b9e:	d003      	beq.n	8000ba8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ba6:	d109      	bne.n	8000bbc <bno055_getVector+0x90>
    scale = accelScale;
 8000ba8:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <bno055_getVector+0x278>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fca1 	bl	80004f4 <__aeabi_ui2d>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460c      	mov	r4, r1
 8000bb6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000bba:	e028      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc0:	2b14      	cmp	r3, #20
 8000bc2:	d109      	bne.n	8000bd8 <bno055_getVector+0xac>
    scale = angularRateScale;
 8000bc4:	4b78      	ldr	r3, [pc, #480]	; (8000da8 <bno055_getVector+0x27c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc93 	bl	80004f4 <__aeabi_ui2d>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000bd6:	e01a      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bdc:	2b1a      	cmp	r3, #26
 8000bde:	d109      	bne.n	8000bf4 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000be0:	4b72      	ldr	r3, [pc, #456]	; (8000dac <bno055_getVector+0x280>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fc85 	bl	80004f4 <__aeabi_ui2d>
 8000bea:	4603      	mov	r3, r0
 8000bec:	460c      	mov	r4, r1
 8000bee:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8000bf2:	e00c      	b.n	8000c0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d108      	bne.n	8000c0e <bno055_getVector+0xe2>
    scale = quaScale;
 8000bfc:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <bno055_getVector+0x284>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fc77 	bl	80004f4 <__aeabi_ui2d>
 8000c06:	4603      	mov	r3, r0
 8000c08:	460c      	mov	r4, r1
 8000c0a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	2220      	movs	r2, #32
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fda2 	bl	8004760 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d150      	bne.n	8000cc6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000c24:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc6c 	bl	8000514 <__aeabi_i2d>
 8000c3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c40:	f7ff fdfc 	bl	800083c <__aeabi_ddiv>
 8000c44:	4603      	mov	r3, r0
 8000c46:	460c      	mov	r4, r1
 8000c48:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000c4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc58 	bl	8000514 <__aeabi_i2d>
 8000c64:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c68:	f7ff fde8 	bl	800083c <__aeabi_ddiv>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	460c      	mov	r4, r1
 8000c70:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000c74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc44 	bl	8000514 <__aeabi_i2d>
 8000c8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c90:	f7ff fdd4 	bl	800083c <__aeabi_ddiv>
 8000c94:	4603      	mov	r3, r0
 8000c96:	460c      	mov	r4, r1
 8000c98:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000c9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fc30 	bl	8000514 <__aeabi_i2d>
 8000cb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000cb8:	f7ff fdc0 	bl	800083c <__aeabi_ddiv>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8000cc4:	e03b      	b.n	8000d3e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000cc6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc1b 	bl	8000514 <__aeabi_i2d>
 8000cde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ce2:	f7ff fdab 	bl	800083c <__aeabi_ddiv>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	460c      	mov	r4, r1
 8000cea:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000cee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fc07 	bl	8000514 <__aeabi_i2d>
 8000d06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000d0a:	f7ff fd97 	bl	800083c <__aeabi_ddiv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	460c      	mov	r4, r1
 8000d12:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000d16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	b21a      	sxth	r2, r3
 8000d1e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fbf3 	bl	8000514 <__aeabi_i2d>
 8000d2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000d32:	f7ff fd83 	bl	800083c <__aeabi_ddiv>
 8000d36:	4603      	mov	r3, r0
 8000d38:	460c      	mov	r4, r1
 8000d3a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  }

  return xyz;
 8000d3e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000d42:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000d56:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000d5a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8000d5e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8000d62:	ec49 8b14 	vmov	d4, r8, r9
 8000d66:	ec46 5b15 	vmov	d5, r5, r6
 8000d6a:	ec42 1b16 	vmov	d6, r1, r2
 8000d6e:	ec44 3b17 	vmov	d7, r3, r4
}
 8000d72:	eeb0 0a44 	vmov.f32	s0, s8
 8000d76:	eef0 0a64 	vmov.f32	s1, s9
 8000d7a:	eeb0 1a45 	vmov.f32	s2, s10
 8000d7e:	eef0 1a65 	vmov.f32	s3, s11
 8000d82:	eeb0 2a46 	vmov.f32	s4, s12
 8000d86:	eef0 2a66 	vmov.f32	s5, s13
 8000d8a:	eeb0 3a47 	vmov.f32	s6, s14
 8000d8e:	eef0 3a67 	vmov.f32	s7, s15
 8000d92:	377c      	adds	r7, #124	; 0x7c
 8000d94:	46bd      	mov	sp, r7
 8000d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d9a:	bf00      	nop
 8000d9c:	3ff00000 	.word	0x3ff00000
 8000da0:	20000006 	.word	0x20000006
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000002 	.word	0x20000002
 8000dac:	20000004 	.word	0x20000004
 8000db0:	20000008 	.word	0x20000008

08000db4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000db8:	b091      	sub	sp, #68	; 0x44
 8000dba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000dbc:	201a      	movs	r0, #26
 8000dbe:	f7ff feb5 	bl	8000b2c <bno055_getVector>
 8000dc2:	eeb0 4a40 	vmov.f32	s8, s0
 8000dc6:	eef0 4a60 	vmov.f32	s9, s1
 8000dca:	eeb0 5a41 	vmov.f32	s10, s2
 8000dce:	eef0 5a61 	vmov.f32	s11, s3
 8000dd2:	eeb0 6a42 	vmov.f32	s12, s4
 8000dd6:	eef0 6a62 	vmov.f32	s13, s5
 8000dda:	eeb0 7a43 	vmov.f32	s14, s6
 8000dde:	eef0 7a63 	vmov.f32	s15, s7
 8000de2:	ed87 4b08 	vstr	d4, [r7, #32]
 8000de6:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000dea:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000dee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000df2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000df6:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000dfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000dfe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000e02:	ec49 8b14 	vmov	d4, r8, r9
 8000e06:	ec46 5b15 	vmov	d5, r5, r6
 8000e0a:	ec42 1b16 	vmov	d6, r1, r2
 8000e0e:	ec44 3b17 	vmov	d7, r3, r4
}
 8000e12:	eeb0 0a44 	vmov.f32	s0, s8
 8000e16:	eef0 0a64 	vmov.f32	s1, s9
 8000e1a:	eeb0 1a45 	vmov.f32	s2, s10
 8000e1e:	eef0 1a65 	vmov.f32	s3, s11
 8000e22:	eeb0 2a46 	vmov.f32	s4, s12
 8000e26:	eef0 2a66 	vmov.f32	s5, s13
 8000e2a:	eeb0 3a47 	vmov.f32	s6, s14
 8000e2e:	eef0 3a67 	vmov.f32	s7, s15
 8000e32:	3744      	adds	r7, #68	; 0x44
 8000e34:	46bd      	mov	sp, r7
 8000e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000e3c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <bno055_assignI2C+0x1c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200000f4 	.word	0x200000f4

08000e5c <bno055_delay>:

void bno055_delay(int time) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fea0 	bl	8001bac <HAL_Delay>
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	733b      	strb	r3, [r7, #12]
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000e8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <bno055_writeData+0x184>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	f107 020c 	add.w	r2, r7, #12
 8000e94:	230a      	movs	r3, #10
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	2150      	movs	r1, #80	; 0x50
 8000e9c:	f001 f990 	bl	80021c0 <HAL_I2C_Master_Transmit>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80a0 	beq.w	8000fec <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d103      	bne.n	8000eba <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000eb2:	4852      	ldr	r0, [pc, #328]	; (8000ffc <bno055_writeData+0x188>)
 8000eb4:	f003 fcd0 	bl	8004858 <puts>
 8000eb8:	e012      	b.n	8000ee0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d103      	bne.n	8000ec8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000ec0:	484f      	ldr	r0, [pc, #316]	; (8001000 <bno055_writeData+0x18c>)
 8000ec2:	f003 fcc9 	bl	8004858 <puts>
 8000ec6:	e00b      	b.n	8000ee0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d103      	bne.n	8000ed6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ece:	484d      	ldr	r0, [pc, #308]	; (8001004 <bno055_writeData+0x190>)
 8000ed0:	f003 fcc2 	bl	8004858 <puts>
 8000ed4:	e004      	b.n	8000ee0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	484b      	ldr	r0, [pc, #300]	; (8001008 <bno055_writeData+0x194>)
 8000edc:	f003 fc48 	bl	8004770 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000ee0:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <bno055_writeData+0x184>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fb63 	bl	80025b0 <HAL_I2C_GetError>
 8000eea:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d07e      	beq.n	8000ff0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d103      	bne.n	8000f00 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000ef8:	4844      	ldr	r0, [pc, #272]	; (800100c <bno055_writeData+0x198>)
 8000efa:	f003 fcad 	bl	8004858 <puts>
 8000efe:	e021      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d103      	bne.n	8000f0e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000f06:	4842      	ldr	r0, [pc, #264]	; (8001010 <bno055_writeData+0x19c>)
 8000f08:	f003 fca6 	bl	8004858 <puts>
 8000f0c:	e01a      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d103      	bne.n	8000f1c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000f14:	483f      	ldr	r0, [pc, #252]	; (8001014 <bno055_writeData+0x1a0>)
 8000f16:	f003 fc9f 	bl	8004858 <puts>
 8000f1a:	e013      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d103      	bne.n	8000f2a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000f22:	483d      	ldr	r0, [pc, #244]	; (8001018 <bno055_writeData+0x1a4>)
 8000f24:	f003 fc98 	bl	8004858 <puts>
 8000f28:	e00c      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d103      	bne.n	8000f38 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000f30:	483a      	ldr	r0, [pc, #232]	; (800101c <bno055_writeData+0x1a8>)
 8000f32:	f003 fc91 	bl	8004858 <puts>
 8000f36:	e005      	b.n	8000f44 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d102      	bne.n	8000f44 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000f3e:	4838      	ldr	r0, [pc, #224]	; (8001020 <bno055_writeData+0x1ac>)
 8000f40:	f003 fc8a 	bl	8004858 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <bno055_writeData+0x184>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fb23 	bl	8002594 <HAL_I2C_GetState>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d103      	bne.n	8000f60 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000f58:	4832      	ldr	r0, [pc, #200]	; (8001024 <bno055_writeData+0x1b0>)
 8000f5a:	f003 fc7d 	bl	8004858 <puts>
 8000f5e:	e048      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	d103      	bne.n	8000f6e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000f66:	482f      	ldr	r0, [pc, #188]	; (8001024 <bno055_writeData+0x1b0>)
 8000f68:	f003 fc76 	bl	8004858 <puts>
 8000f6c:	e041      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b24      	cmp	r3, #36	; 0x24
 8000f72:	d103      	bne.n	8000f7c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000f74:	482c      	ldr	r0, [pc, #176]	; (8001028 <bno055_writeData+0x1b4>)
 8000f76:	f003 fc6f 	bl	8004858 <puts>
 8000f7a:	e03a      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b21      	cmp	r3, #33	; 0x21
 8000f80:	d103      	bne.n	8000f8a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000f82:	482a      	ldr	r0, [pc, #168]	; (800102c <bno055_writeData+0x1b8>)
 8000f84:	f003 fc68 	bl	8004858 <puts>
 8000f88:	e033      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b22      	cmp	r3, #34	; 0x22
 8000f8e:	d103      	bne.n	8000f98 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000f90:	4827      	ldr	r0, [pc, #156]	; (8001030 <bno055_writeData+0x1bc>)
 8000f92:	f003 fc61 	bl	8004858 <puts>
 8000f96:	e02c      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b28      	cmp	r3, #40	; 0x28
 8000f9c:	d103      	bne.n	8000fa6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000f9e:	4825      	ldr	r0, [pc, #148]	; (8001034 <bno055_writeData+0x1c0>)
 8000fa0:	f003 fc5a 	bl	8004858 <puts>
 8000fa4:	e025      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b29      	cmp	r3, #41	; 0x29
 8000faa:	d103      	bne.n	8000fb4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000fac:	4822      	ldr	r0, [pc, #136]	; (8001038 <bno055_writeData+0x1c4>)
 8000fae:	f003 fc53 	bl	8004858 <puts>
 8000fb2:	e01e      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8000fb8:	d103      	bne.n	8000fc2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000fba:	4820      	ldr	r0, [pc, #128]	; (800103c <bno055_writeData+0x1c8>)
 8000fbc:	f003 fc4c 	bl	8004858 <puts>
 8000fc0:	e017      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b60      	cmp	r3, #96	; 0x60
 8000fc6:	d103      	bne.n	8000fd0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000fc8:	481d      	ldr	r0, [pc, #116]	; (8001040 <bno055_writeData+0x1cc>)
 8000fca:	f003 fc45 	bl	8004858 <puts>
 8000fce:	e010      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8000fd4:	d103      	bne.n	8000fde <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <bno055_writeData+0x1d0>)
 8000fd8:	f003 fc3e 	bl	8004858 <puts>
 8000fdc:	e009      	b.n	8000ff2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2be0      	cmp	r3, #224	; 0xe0
 8000fe2:	d106      	bne.n	8000ff2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000fe4:	4818      	ldr	r0, [pc, #96]	; (8001048 <bno055_writeData+0x1d4>)
 8000fe6:	f003 fc37 	bl	8004858 <puts>
 8000fea:	e002      	b.n	8000ff2 <bno055_writeData+0x17e>
    return;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <bno055_writeData+0x17e>
    return;
 8000ff0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000f4 	.word	0x200000f4
 8000ffc:	08005654 	.word	0x08005654
 8001000:	08005678 	.word	0x08005678
 8001004:	080056a0 	.word	0x080056a0
 8001008:	080056c4 	.word	0x080056c4
 800100c:	080056dc 	.word	0x080056dc
 8001010:	080056f0 	.word	0x080056f0
 8001014:	08005704 	.word	0x08005704
 8001018:	08005718 	.word	0x08005718
 800101c:	0800572c 	.word	0x0800572c
 8001020:	08005740 	.word	0x08005740
 8001024:	08005758 	.word	0x08005758
 8001028:	08005770 	.word	0x08005770
 800102c:	08005784 	.word	0x08005784
 8001030:	0800579c 	.word	0x0800579c
 8001034:	080057b4 	.word	0x080057b4
 8001038:	080057cc 	.word	0x080057cc
 800103c:	080057ec 	.word	0x080057ec
 8001040:	0800580c 	.word	0x0800580c
 8001044:	08005824 	.word	0x08005824
 8001048:	0800583c 	.word	0x0800583c

0800104c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <bno055_readData+0x40>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	1dfa      	adds	r2, r7, #7
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2150      	movs	r1, #80	; 0x50
 800106a:	f001 f8a9 	bl	80021c0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <bno055_readData+0x40>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	b29a      	uxth	r2, r3
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	2150      	movs	r1, #80	; 0x50
 8001080:	f001 f992 	bl	80023a8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000f4 	.word	0x200000f4

08001090 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0]=c;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a6:	2201      	movs	r2, #1
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <uart_putc+0x28>)
 80010aa:	f002 ffb7 	bl	800401c <HAL_UART_Transmit>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000f8 	.word	0x200000f8

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <main+0x80>)
 80010c4:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <main+0x84>)
 80010c6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f000 fd0a 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 f83e 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 f908 	bl	80012e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d4:	f000 f8d6 	bl	8001284 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010d8:	f000 f896 	bl	8001208 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 80010dc:	4819      	ldr	r0, [pc, #100]	; (8001144 <main+0x88>)
 80010de:	f7ff fead 	bl	8000e3c <bno055_assignI2C>
  bno055_setup();
 80010e2:	f7ff fcfb 	bl	8000adc <bno055_setup>
  bno055_setOperationModeNDOF();
 80010e6:	f7ff fce6 	bl	8000ab6 <bno055_setOperationModeNDOF>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    bno055_vector_t v = bno055_getVectorEuler();
 80010ea:	f7ff fe63 	bl	8000db4 <bno055_getVectorEuler>
 80010ee:	eeb0 4a40 	vmov.f32	s8, s0
 80010f2:	eef0 4a60 	vmov.f32	s9, s1
 80010f6:	eeb0 5a41 	vmov.f32	s10, s2
 80010fa:	eef0 5a61 	vmov.f32	s11, s3
 80010fe:	eeb0 6a42 	vmov.f32	s12, s4
 8001102:	eef0 6a62 	vmov.f32	s13, s5
 8001106:	eeb0 7a43 	vmov.f32	s14, s6
 800110a:	eef0 7a63 	vmov.f32	s15, s7
 800110e:	ed87 4b00 	vstr	d4, [r7]
 8001112:	ed87 5b02 	vstr	d5, [r7, #8]
 8001116:	ed87 6b04 	vstr	d6, [r7, #16]
 800111a:	ed87 7b06 	vstr	d7, [r7, #24]
	    xprintf("%d\r\n", (int)v.x);
 800111e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001122:	4618      	mov	r0, r3
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff fc71 	bl	8000a0c <__aeabi_d2iz>
 800112a:	4603      	mov	r3, r0
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <main+0x8c>)
 8001130:	f000 fc9a 	bl	8001a68 <xprintf>
	    v.x=v.x*1000;
	    v.y=v.y*1000;
	    v.z=v.z*1000;
	    v.w=v.w*1000;
	    xprintf("W: %d X: %d Y: %d Z: %d\r\n", (int)v.w, (int)v.x, (int)v.y, (int)v.z);*/
	    HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f000 fd39 	bl	8001bac <HAL_Delay>
  {
 800113a:	e7d6      	b.n	80010ea <main+0x2e>
 800113c:	2000017c 	.word	0x2000017c
 8001140:	08001091 	.word	0x08001091
 8001144:	200000a8 	.word	0x200000a8
 8001148:	08005854 	.word	0x08005854

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b096      	sub	sp, #88	; 0x58
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001156:	2228      	movs	r2, #40	; 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fb00 	bl	8004760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001180:	2303      	movs	r3, #3
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001184:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118e:	2301      	movs	r3, #1
 8001190:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001192:	2310      	movs	r3, #16
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fc84 	bl	8002ab8 <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011b6:	f000 f8c5 	bl	8001344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fb76 	bl	80038c8 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011e2:	f000 f8af 	bl	8001344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e6:	2320      	movs	r3, #32
 80011e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fd9f 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011fc:	f000 f8a2 	bl	8001344 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3758      	adds	r7, #88	; 0x58
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_I2C1_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_I2C1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_I2C1_Init+0x74>)
 8001214:	f240 220b 	movw	r2, #523	; 0x20b
 8001218:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_I2C1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_I2C1_Init+0x74>)
 8001222:	2201      	movs	r2, #1
 8001224:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_I2C1_Init+0x74>)
 8001246:	f000 ff2b 	bl	80020a0 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 f878 	bl	8001344 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001254:	2100      	movs	r1, #0
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_I2C1_Init+0x74>)
 8001258:	f001 fb96 	bl	8002988 <HAL_I2CEx_ConfigAnalogFilter>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001262:	f000 f86f 	bl	8001344 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_I2C1_Init+0x74>)
 800126a:	f001 fbd8 	bl	8002a1e <HAL_I2CEx_ConfigDigitalFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001274:	f000 f866 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000a8 	.word	0x200000a8
 8001280:	40005400 	.word	0x40005400

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_USART2_UART_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <MX_USART2_UART_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_USART2_UART_Init+0x58>)
 8001290:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART2_UART_Init+0x58>)
 80012c8:	f002 fe5a 	bl	8003f80 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 f837 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000f8 	.word	0x200000f8
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_GPIO_Init+0x5c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <MX_GPIO_Init+0x5c>)
 80012f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_GPIO_Init+0x5c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_GPIO_Init+0x5c>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <MX_GPIO_Init+0x5c>)
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_GPIO_Init+0x5c>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_GPIO_Init+0x5c>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <MX_GPIO_Init+0x5c>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_GPIO_Init+0x5c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_MspInit+0x44>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_MspInit+0x44>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6193      	str	r3, [r2, #24]
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_MspInit+0x44>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x44>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x44>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x44>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_I2C_MspInit+0x7c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d127      	bne.n	800140e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_I2C_MspInit+0x80>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_I2C_MspInit+0x80>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	6153      	str	r3, [r2, #20]
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_I2C_MspInit+0x80>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d6:	23c0      	movs	r3, #192	; 0xc0
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013da:	2312      	movs	r3, #18
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013de:	2301      	movs	r3, #1
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e6:	2304      	movs	r3, #4
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <HAL_I2C_MspInit+0x84>)
 80013f2:	f000 fce3 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_I2C_MspInit+0x80>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_I2C_MspInit+0x80>)
 80013fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001400:	61d3      	str	r3, [r2, #28]
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_I2C_MspInit+0x80>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40005400 	.word	0x40005400
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_UART_MspInit+0x80>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d129      	bne.n	800149a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_UART_MspInit+0x84>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0x84>)
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_UART_MspInit+0x84>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_UART_MspInit+0x84>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0x84>)
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	6153      	str	r3, [r2, #20]
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_UART_MspInit+0x84>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001476:	f248 0304 	movw	r3, #32772	; 0x8004
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001488:	2307      	movs	r3, #7
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f000 fc91 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004400 	.word	0x40004400
 80014a8:	40021000 	.word	0x40021000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 fb34 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e00a      	b.n	8001530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800151a:	f3af 8000 	nop.w
 800151e:	4601      	mov	r1, r0
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf0      	blt.n	800151a <_read+0x12>
	}

return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e009      	b.n	8001568 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf1      	blt.n	8001554 <_write+0x12>
	}
	return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_close>:

int _close(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a2:	605a      	str	r2, [r3, #4]
	return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_isatty>:

int _isatty(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
	return 1;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
	return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f003 f87a 	bl	800470c <__errno>
 8001618:	4602      	mov	r2, r0
 800161a:	230c      	movs	r3, #12
 800161c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20003000 	.word	0x20003000
 8001644:	00000400 	.word	0x00000400
 8001648:	20000098 	.word	0x20000098
 800164c:	20000188 	.word	0x20000188

08001650 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <SystemInit+0x28>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <SystemInit+0x28>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SystemInit+0x28>)
 8001666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800166a:	609a      	str	r2, [r3, #8]
#endif
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b0a      	cmp	r3, #10
 800168a:	d102      	bne.n	8001692 <xputc+0x16>
 800168c:	200d      	movs	r0, #13
 800168e:	f7ff fff5 	bl	800167c <xputc>

	if (outptr) {		/* Destination is memory */
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <xputc+0x48>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <xputc+0x48>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	4908      	ldr	r1, [pc, #32]	; (80016c4 <xputc+0x48>)
 80016a2:	600a      	str	r2, [r1, #0]
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	701a      	strb	r2, [r3, #0]
		return;
 80016a8:	e008      	b.n	80016bc <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <xputc+0x4c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <xputc+0x40>
		xfunc_out((unsigned char)c);
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <xputc+0x4c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	79fa      	ldrb	r2, [r7, #7]
 80016b8:	4610      	mov	r0, r2
 80016ba:	4798      	blx	r3
	}
}
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000009c 	.word	0x2000009c
 80016c8:	2000017c 	.word	0x2000017c

080016cc <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	while (*str) {
 80016d4:	e006      	b.n	80016e4 <xputs+0x18>
		xputc(*str++);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ffcc 	bl	800167c <xputc>
	while (*str) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f4      	bne.n	80016d6 <xputs+0xa>
	}
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	; 0x50
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 800170a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 81a3 	beq.w	8001a5a <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8001714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001718:	2b25      	cmp	r3, #37	; 0x25
 800171a:	d005      	beq.n	8001728 <xvprintf+0x34>
			xputc(c); continue;
 800171c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffab 	bl	800167c <xputc>
 8001726:	e197      	b.n	8001a58 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8001728:	2300      	movs	r3, #0
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
 800172c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 800173c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001740:	2b30      	cmp	r3, #48	; 0x30
 8001742:	d108      	bne.n	8001756 <xvprintf+0x62>
			f = 1; c = *fmt++;
 8001744:	2301      	movs	r3, #1
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001754:	e00b      	b.n	800176e <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8001756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800175a:	2b2d      	cmp	r3, #45	; 0x2d
 800175c:	d107      	bne.n	800176e <xvprintf+0x7a>
				f = 2; c = *fmt++;
 800175e:	2302      	movs	r3, #2
 8001760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 800176e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001772:	2b2a      	cmp	r3, #42	; 0x2a
 8001774:	d126      	bne.n	80017c4 <xvprintf+0xd0>
			n = va_arg(arp, int);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	1d1a      	adds	r2, r3, #4
 800177a:	603a      	str	r2, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8001780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001782:	2b00      	cmp	r3, #0
 8001784:	da04      	bge.n	8001790 <xvprintf+0x9c>
				n = 0 - n;
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	425b      	negs	r3, r3
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 800178c:	2302      	movs	r3, #2
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8001790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80017a0:	e018      	b.n	80017d4 <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 80017a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	461a      	mov	r2, r3
 80017ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017b2:	4413      	add	r3, r2
 80017b4:	3b30      	subs	r3, #48	; 0x30
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 80017c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017c8:	2b2f      	cmp	r3, #47	; 0x2f
 80017ca:	d903      	bls.n	80017d4 <xvprintf+0xe0>
 80017cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017d0:	2b39      	cmp	r3, #57	; 0x39
 80017d2:	d9e6      	bls.n	80017a2 <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 80017d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017d8:	2b6c      	cmp	r3, #108	; 0x6c
 80017da:	d003      	beq.n	80017e4 <xvprintf+0xf0>
 80017dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017e0:	2b4c      	cmp	r3, #76	; 0x4c
 80017e2:	d109      	bne.n	80017f8 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 80017e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 80017f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 812e 	beq.w	8001a5e <xvprintf+0x36a>
		d = c;
 8001802:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001806:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 800180a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800180e:	2b60      	cmp	r3, #96	; 0x60
 8001810:	d904      	bls.n	800181c <xvprintf+0x128>
 8001812:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001816:	3b20      	subs	r3, #32
 8001818:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 800181c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001820:	3b42      	subs	r3, #66	; 0x42
 8001822:	2b16      	cmp	r3, #22
 8001824:	d873      	bhi.n	800190e <xvprintf+0x21a>
 8001826:	a201      	add	r2, pc, #4	; (adr r2, 800182c <xvprintf+0x138>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	080018f7 	.word	0x080018f7
 8001830:	080018e5 	.word	0x080018e5
 8001834:	08001903 	.word	0x08001903
 8001838:	0800190f 	.word	0x0800190f
 800183c:	0800190f 	.word	0x0800190f
 8001840:	0800190f 	.word	0x0800190f
 8001844:	0800190f 	.word	0x0800190f
 8001848:	0800190f 	.word	0x0800190f
 800184c:	0800190f 	.word	0x0800190f
 8001850:	0800190f 	.word	0x0800190f
 8001854:	0800190f 	.word	0x0800190f
 8001858:	0800190f 	.word	0x0800190f
 800185c:	0800190f 	.word	0x0800190f
 8001860:	080018fd 	.word	0x080018fd
 8001864:	0800190f 	.word	0x0800190f
 8001868:	0800190f 	.word	0x0800190f
 800186c:	0800190f 	.word	0x0800190f
 8001870:	08001889 	.word	0x08001889
 8001874:	0800190f 	.word	0x0800190f
 8001878:	08001903 	.word	0x08001903
 800187c:	0800190f 	.word	0x0800190f
 8001880:	0800190f 	.word	0x0800190f
 8001884:	08001909 	.word	0x08001909
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	1d1a      	adds	r2, r3, #4
 800188c:	603a      	str	r2, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8001892:	2300      	movs	r3, #0
 8001894:	647b      	str	r3, [r7, #68]	; 0x44
 8001896:	e002      	b.n	800189e <xvprintf+0x1aa>
 8001898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189a:	3301      	adds	r3, #1
 800189c:	647b      	str	r3, [r7, #68]	; 0x44
 800189e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f6      	bne.n	8001898 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 80018aa:	e002      	b.n	80018b2 <xvprintf+0x1be>
 80018ac:	2020      	movs	r0, #32
 80018ae:	f7ff fee5 	bl	800167c <xputc>
 80018b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <xvprintf+0x1d4>
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	647a      	str	r2, [r7, #68]	; 0x44
 80018c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f1      	bhi.n	80018ac <xvprintf+0x1b8>
			xputs(p);
 80018c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018ca:	f7ff feff 	bl	80016cc <xputs>
			while (j++ < w) xputc(' ');
 80018ce:	e002      	b.n	80018d6 <xvprintf+0x1e2>
 80018d0:	2020      	movs	r0, #32
 80018d2:	f7ff fed3 	bl	800167c <xputc>
 80018d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	647a      	str	r2, [r7, #68]	; 0x44
 80018dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018de:	429a      	cmp	r2, r3
 80018e0:	d8f6      	bhi.n	80018d0 <xvprintf+0x1dc>
			continue;
 80018e2:	e0b9      	b.n	8001a58 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	1d1a      	adds	r2, r3, #4
 80018e8:	603a      	str	r2, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fec4 	bl	800167c <xputc>
 80018f4:	e0b0      	b.n	8001a58 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 80018f6:	2302      	movs	r3, #2
 80018f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018fa:	e00e      	b.n	800191a <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 80018fc:	2308      	movs	r3, #8
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001900:	e00b      	b.n	800191a <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8001902:	230a      	movs	r3, #10
 8001904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001906:	e008      	b.n	800191a <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8001908:	2310      	movs	r3, #16
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190c:	e005      	b.n	800191a <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 800190e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff feb2 	bl	800167c <xputc>
 8001918:	e09e      	b.n	8001a58 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <xvprintf+0x23c>
			v = va_arg(arp, long);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	1d1a      	adds	r2, r3, #4
 8001928:	603a      	str	r2, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
 800192e:	e00d      	b.n	800194c <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8001930:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001934:	2b44      	cmp	r3, #68	; 0x44
 8001936:	d104      	bne.n	8001942 <xvprintf+0x24e>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	603a      	str	r2, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e003      	b.n	800194a <xvprintf+0x256>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	1d1a      	adds	r2, r3, #4
 8001946:	603a      	str	r2, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 800194c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001950:	2b44      	cmp	r3, #68	; 0x44
 8001952:	d109      	bne.n	8001968 <xvprintf+0x274>
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	da06      	bge.n	8001968 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	425b      	negs	r3, r3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
 8001960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8001968:	2300      	movs	r3, #0
 800196a:	64bb      	str	r3, [r7, #72]	; 0x48
 800196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001974:	fbb3 f2f2 	udiv	r2, r3, r2
 8001978:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800197a:	fb01 f202 	mul.w	r2, r1, r2
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800198e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001992:	2b09      	cmp	r3, #9
 8001994:	d90b      	bls.n	80019ae <xvprintf+0x2ba>
 8001996:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800199a:	2b78      	cmp	r3, #120	; 0x78
 800199c:	d101      	bne.n	80019a2 <xvprintf+0x2ae>
 800199e:	2227      	movs	r2, #39	; 0x27
 80019a0:	e000      	b.n	80019a4 <xvprintf+0x2b0>
 80019a2:	2207      	movs	r2, #7
 80019a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80019a8:	4413      	add	r3, r2
 80019aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 80019ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80019b4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80019b8:	3230      	adds	r2, #48	; 0x30
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80019c0:	440b      	add	r3, r1
 80019c2:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 80019c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <xvprintf+0x2de>
 80019cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ce:	2b1f      	cmp	r3, #31
 80019d0:	d9ce      	bls.n	8001970 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 80019d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <xvprintf+0x2fa>
 80019dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80019e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80019e6:	4413      	add	r3, r2
 80019e8:	222d      	movs	r2, #45	; 0x2d
 80019ea:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 80019ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
 80019f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <xvprintf+0x30c>
 80019fc:	2330      	movs	r3, #48	; 0x30
 80019fe:	e000      	b.n	8001a02 <xvprintf+0x30e>
 8001a00:	2320      	movs	r3, #32
 8001a02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 8001a06:	e004      	b.n	8001a12 <xvprintf+0x31e>
 8001a08:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fe35 	bl	800167c <xputc>
 8001a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <xvprintf+0x334>
 8001a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	647a      	str	r2, [r7, #68]	; 0x44
 8001a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8ef      	bhi.n	8001a08 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 8001a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a2e:	f107 0208 	add.w	r2, r7, #8
 8001a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fe1f 	bl	800167c <xputc>
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f1      	bne.n	8001a28 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 8001a44:	e002      	b.n	8001a4c <xvprintf+0x358>
 8001a46:	2020      	movs	r0, #32
 8001a48:	f7ff fe18 	bl	800167c <xputc>
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	647a      	str	r2, [r7, #68]	; 0x44
 8001a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f6      	bhi.n	8001a46 <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8001a58:	e651      	b.n	80016fe <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8001a5a:	bf00      	nop
 8001a5c:	e000      	b.n	8001a60 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 8001a5e:	bf00      	nop
	}
}
 8001a60:	bf00      	nop
 8001a62:	3750      	adds	r7, #80	; 0x50
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001a68:	b40f      	push	{r0, r1, r2, r3}
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	6938      	ldr	r0, [r7, #16]
 8001a7a:	f7ff fe3b 	bl	80016f4 <xvprintf>
	va_end(arp);
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a88:	b004      	add	sp, #16
 8001a8a:	4770      	bx	lr

08001a8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a92:	e003      	b.n	8001a9c <LoopCopyDataInit>

08001a94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a9a:	3104      	adds	r1, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001aa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001aa4:	d3f6      	bcc.n	8001a94 <CopyDataInit>
	ldr	r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001aa8:	e002      	b.n	8001ab0 <LoopFillZerobss>

08001aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aac:	f842 3b04 	str.w	r3, [r2], #4

08001ab0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <LoopForever+0x16>)
	cmp	r2, r3
 8001ab2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ab4:	d3f9      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ab6:	f7ff fdcb 	bl	8001650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f002 fe2d 	bl	8004718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001abe:	f7ff fafd 	bl	80010bc <main>

08001ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ac2:	e7fe      	b.n	8001ac2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ac4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001ac8:	08005934 	.word	0x08005934
	ldr	r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ad0:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001ad4:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8001ad8:	20000188 	.word	0x20000188

08001adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC1_2_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_Init+0x28>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_Init+0x28>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 f92f 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f808 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff fc2a 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000

08001b0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f939 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f90f 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	20000014 	.word	0x20000014
 8001b68:	20000010 	.word	0x20000010

08001b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000014 	.word	0x20000014
 8001b90:	20000180 	.word	0x20000180

08001b94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000180 	.word	0x20000180

08001bac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_Delay+0x40>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000014 	.word	0x20000014

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff47 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff5c 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffb0 	bl	8001d10 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dca:	e14e      	b.n	800206a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8140 	beq.w	8002064 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d00b      	beq.n	8001e04 <HAL_GPIO_Init+0x48>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d007      	beq.n	8001e04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df8:	2b11      	cmp	r3, #17
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b12      	cmp	r3, #18
 8001e02:	d130      	bne.n	8001e66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 0201 	and.w	r2, r3, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0xea>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b12      	cmp	r3, #18
 8001ea4:	d123      	bne.n	8001eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3208      	adds	r2, #8
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0203 	and.w	r2, r3, #3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 809a 	beq.w	8002064 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f30:	4b55      	ldr	r3, [pc, #340]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a54      	ldr	r2, [pc, #336]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b52      	ldr	r3, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f48:	4a50      	ldr	r2, [pc, #320]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1e0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a46      	ldr	r2, [pc, #280]	; (8002090 <HAL_GPIO_Init+0x2d4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a45      	ldr	r2, [pc, #276]	; (8002094 <HAL_GPIO_Init+0x2d8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1d8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a44      	ldr	r2, [pc, #272]	; (8002098 <HAL_GPIO_Init+0x2dc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1d4>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f90:	2305      	movs	r3, #5
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1e2>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fae:	4937      	ldr	r1, [pc, #220]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800200a:	4a24      	ldr	r2, [pc, #144]	; (800209c <HAL_GPIO_Init+0x2e0>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_GPIO_Init+0x2e0>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f47f aea9 	bne.w	8001dcc <HAL_GPIO_Init+0x10>
  }
}
 800207a:	bf00      	nop
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	48000400 	.word	0x48000400
 8002094:	48000800 	.word	0x48000800
 8002098:	48000c00 	.word	0x48000c00
 800209c:	40010400 	.word	0x40010400

080020a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e081      	b.n	80021b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff f968 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002100:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	e006      	b.n	8002128 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002126:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d104      	bne.n	800213a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	ea42 0103 	orr.w	r1, r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	021a      	lsls	r2, r3, #8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69d9      	ldr	r1, [r3, #28]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	461a      	mov	r2, r3
 80021cc:	460b      	mov	r3, r1
 80021ce:	817b      	strh	r3, [r7, #10]
 80021d0:	4613      	mov	r3, r2
 80021d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b20      	cmp	r3, #32
 80021de:	f040 80da 	bne.w	8002396 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_I2C_Master_Transmit+0x30>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0d3      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1d8>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021f8:	f7ff fccc 	bl	8001b94 <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2319      	movs	r3, #25
 8002204:	2201      	movs	r2, #1
 8002206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fa00 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0be      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2210      	movs	r2, #16
 8002226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	2bff      	cmp	r3, #255	; 0xff
 800224a:	d90e      	bls.n	800226a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	22ff      	movs	r2, #255	; 0xff
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	b2da      	uxtb	r2, r3
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fb62 	bl	800292c <I2C_TransferConfig>
 8002268:	e06c      	b.n	8002344 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	b2da      	uxtb	r2, r3
 800227a:	8979      	ldrh	r1, [r7, #10]
 800227c:	4b48      	ldr	r3, [pc, #288]	; (80023a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fb51 	bl	800292c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800228a:	e05b      	b.n	8002344 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	6a39      	ldr	r1, [r7, #32]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f9fd 	bl	8002690 <I2C_WaitOnTXISFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e07b      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d034      	beq.n	8002344 <HAL_I2C_Master_Transmit+0x184>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d130      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f98f 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e04d      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2bff      	cmp	r3, #255	; 0xff
 8002304:	d90e      	bls.n	8002324 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	22ff      	movs	r2, #255	; 0xff
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	b2da      	uxtb	r2, r3
 8002312:	8979      	ldrh	r1, [r7, #10]
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fb05 	bl	800292c <I2C_TransferConfig>
 8002322:	e00f      	b.n	8002344 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	b2da      	uxtb	r2, r3
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	2300      	movs	r3, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 faf4 	bl	800292c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d19e      	bne.n	800228c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f9dc 	bl	8002710 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e01a      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2220      	movs	r2, #32
 8002368:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002376:	400b      	ands	r3, r1
 8002378:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	80002000 	.word	0x80002000
 80023a4:	fe00e800 	.word	0xfe00e800

080023a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	460b      	mov	r3, r1
 80023b6:	817b      	strh	r3, [r7, #10]
 80023b8:	4613      	mov	r3, r2
 80023ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	f040 80db 	bne.w	8002580 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_I2C_Master_Receive+0x30>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e0d4      	b.n	8002582 <HAL_I2C_Master_Receive+0x1da>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023e0:	f7ff fbd8 	bl	8001b94 <HAL_GetTick>
 80023e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2319      	movs	r3, #25
 80023ec:	2201      	movs	r2, #1
 80023ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f90c 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0bf      	b.n	8002582 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2222      	movs	r2, #34	; 0x22
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2210      	movs	r2, #16
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	893a      	ldrh	r2, [r7, #8]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2bff      	cmp	r3, #255	; 0xff
 8002432:	d90e      	bls.n	8002452 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	22ff      	movs	r2, #255	; 0xff
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	4b52      	ldr	r3, [pc, #328]	; (800258c <HAL_I2C_Master_Receive+0x1e4>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa6e 	bl	800292c <I2C_TransferConfig>
 8002450:	e06d      	b.n	800252e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	b2da      	uxtb	r2, r3
 8002462:	8979      	ldrh	r1, [r7, #10]
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_I2C_Master_Receive+0x1e4>)
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fa5d 	bl	800292c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002472:	e05c      	b.n	800252e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	6a39      	ldr	r1, [r7, #32]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f985 	bl	8002788 <I2C_WaitOnRXNEFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e07c      	b.n	8002582 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d034      	beq.n	800252e <HAL_I2C_Master_Receive+0x186>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d130      	bne.n	800252e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f89a 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e04d      	b.n	8002582 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2bff      	cmp	r3, #255	; 0xff
 80024ee:	d90e      	bls.n	800250e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	22ff      	movs	r2, #255	; 0xff
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa10 	bl	800292c <I2C_TransferConfig>
 800250c:	e00f      	b.n	800252e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251c:	b2da      	uxtb	r2, r3
 800251e:	8979      	ldrh	r1, [r7, #10]
 8002520:	2300      	movs	r3, #0
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f9ff 	bl	800292c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d19d      	bne.n	8002474 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	6a39      	ldr	r1, [r7, #32]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f8e7 	bl	8002710 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e01a      	b.n	8002582 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2220      	movs	r2, #32
 8002552:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_I2C_Master_Receive+0x1e8>)
 8002560:	400b      	ands	r3, r1
 8002562:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002580:	2302      	movs	r3, #2
  }
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	80002400 	.word	0x80002400
 8002590:	fe00e800 	.word	0xfe00e800

08002594 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a2:	b2db      	uxtb	r3, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d103      	bne.n	80025e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d007      	beq.n	8002604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	619a      	str	r2, [r3, #24]
  }
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	e022      	b.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d01e      	beq.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff fab3 	bl	8001b94 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d113      	bne.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e00f      	b.n	8002688 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	429a      	cmp	r2, r3
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	429a      	cmp	r2, r3
 8002684:	d0cd      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800269c:	e02c      	b.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f8dc 	bl	8002860 <I2C_IsAcknowledgeFailed>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e02a      	b.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d01e      	beq.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff fa6b 	bl	8001b94 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d113      	bne.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d1cb      	bne.n	800269e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800271c:	e028      	b.n	8002770 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f89c 	bl	8002860 <I2C_IsAcknowledgeFailed>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e026      	b.n	8002780 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7ff fa2f 	bl	8001b94 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d113      	bne.n	8002770 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b20      	cmp	r3, #32
 800277c:	d1cf      	bne.n	800271e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002794:	e055      	b.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f860 	bl	8002860 <I2C_IsAcknowledgeFailed>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e053      	b.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d129      	bne.n	800280c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d105      	bne.n	80027d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e03f      	b.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2220      	movs	r2, #32
 80027d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80027e6:	400b      	ands	r3, r1
 80027e8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e022      	b.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280c:	f7ff f9c2 	bl	8001b94 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	429a      	cmp	r2, r3
 800281a:	d302      	bcc.n	8002822 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e007      	b.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d1a2      	bne.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	fe00e800 	.word	0xfe00e800

08002860 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b10      	cmp	r3, #16
 8002878:	d151      	bne.n	800291e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800287a:	e022      	b.n	80028c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d01e      	beq.n	80028c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002884:	f7ff f986 	bl	8001b94 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d302      	bcc.n	800289a <I2C_IsAcknowledgeFailed+0x3a>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d113      	bne.n	80028c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e02e      	b.n	8002920 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d1d5      	bne.n	800287c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2220      	movs	r2, #32
 80028de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fe71 	bl	80025c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <I2C_IsAcknowledgeFailed+0xc8>)
 80028f2:	400b      	ands	r3, r1
 80028f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0204 	orr.w	r2, r3, #4
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	fe00e800 	.word	0xfe00e800

0800292c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	4613      	mov	r3, r2
 800293c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	0d5b      	lsrs	r3, r3, #21
 8002948:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <I2C_TransferConfig+0x58>)
 800294e:	430b      	orrs	r3, r1
 8002950:	43db      	mvns	r3, r3
 8002952:	ea02 0103 	and.w	r1, r2, r3
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800295c:	7a7b      	ldrb	r3, [r7, #9]
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	431a      	orrs	r2, r3
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	03ff63ff 	.word	0x03ff63ff

08002988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d138      	bne.n	8002a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e032      	b.n	8002a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d139      	bne.n	8002aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e033      	b.n	8002aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2224      	movs	r2, #36	; 0x24
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f000 bef4 	b.w	80038ba <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 816a 	beq.w	8002db6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ae2:	4bb3      	ldr	r3, [pc, #716]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d00c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aee:	4bb0      	ldr	r3, [pc, #704]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d159      	bne.n	8002bae <HAL_RCC_OscConfig+0xf6>
 8002afa:	4bad      	ldr	r3, [pc, #692]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d152      	bne.n	8002bae <HAL_RCC_OscConfig+0xf6>
 8002b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b0c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_RCC_OscConfig+0x82>
 8002b34:	4b9e      	ldr	r3, [pc, #632]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0xae>
 8002b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b52:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b56:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b62:	4b93      	ldr	r3, [pc, #588]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b6a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b6e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b72:	fa92 f2a2 	rbit	r2, r2
 8002b76:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b7a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f042 0220 	orr.w	r2, r2, #32
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 021f 	and.w	r2, r2, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 810c 	beq.w	8002db4 <HAL_RCC_OscConfig+0x2fc>
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 8106 	bne.w	8002db4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f000 be86 	b.w	80038ba <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x110>
 8002bba:	4b7d      	ldr	r3, [pc, #500]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e030      	b.n	8002c2a <HAL_RCC_OscConfig+0x172>
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x134>
 8002bd2:	4b77      	ldr	r3, [pc, #476]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a76      	ldr	r2, [pc, #472]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b74      	ldr	r3, [pc, #464]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a73      	ldr	r2, [pc, #460]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01e      	b.n	8002c2a <HAL_RCC_OscConfig+0x172>
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x15a>
 8002bf8:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6c      	ldr	r2, [pc, #432]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0x172>
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a66      	ldr	r2, [pc, #408]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a63      	ldr	r2, [pc, #396]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2a:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f023 020f 	bic.w	r2, r3, #15
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	495d      	ldr	r1, [pc, #372]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d059      	beq.n	8002cfc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe ffa4 	bl	8001b94 <HAL_GetTick>
 8002c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c52:	f7fe ff9f 	bl	8001b94 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d902      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	f000 be29 	b.w	80038ba <HAL_RCC_OscConfig+0xe02>
 8002c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1e2>
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x20e>
 8002c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cb6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002cda:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002cde:	fab2 f282 	clz	r2, r2
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f042 0220 	orr.w	r2, r2, #32
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f002 021f 	and.w	r2, r2, #31
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ab      	beq.n	8002c52 <HAL_RCC_OscConfig+0x19a>
 8002cfa:	e05c      	b.n	8002db6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ff4a 	bl	8001b94 <HAL_GetTick>
 8002d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d06:	f7fe ff45 	bl	8001b94 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d902      	bls.n	8002d1c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	f000 bdcf 	b.w	80038ba <HAL_RCC_OscConfig+0xe02>
 8002d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_OscConfig+0x296>
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x2c2>
 8002d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d6a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_RCC_OscConfig+0x2f8>)
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	f042 0220 	orr.w	r2, r2, #32
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f002 021f 	and.w	r2, r2, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ab      	bne.n	8002d06 <HAL_RCC_OscConfig+0x24e>
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_OscConfig+0x2fe>
 8002db0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 816f 	beq.w	80030a4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dc6:	4bd0      	ldr	r3, [pc, #832]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dd2:	4bcd      	ldr	r3, [pc, #820]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d16c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x400>
 8002dde:	4bca      	ldr	r3, [pc, #808]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d166      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x400>
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002dfc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_OscConfig+0x362>
 8002e14:	4bbc      	ldr	r3, [pc, #752]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	e013      	b.n	8002e42 <HAL_RCC_OscConfig+0x38a>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e3e:	4bb2      	ldr	r3, [pc, #712]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2202      	movs	r2, #2
 8002e44:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e48:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e4c:	fa92 f2a2 	rbit	r2, r2
 8002e50:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e54:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e58:	fab2 f282 	clz	r2, r2
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	f002 021f 	and.w	r2, r2, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_RCC_OscConfig+0x3cc>
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f000 bd1b 	b.w	80038ba <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4ba0      	ldr	r3, [pc, #640]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	21f8      	movs	r1, #248	; 0xf8
 8002e94:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e9c:	fa91 f1a1 	rbit	r1, r1
 8002ea0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ea4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ea8:	fab1 f181 	clz	r1, r1
 8002eac:	b2c9      	uxtb	r1, r1
 8002eae:	408b      	lsls	r3, r1
 8002eb0:	4995      	ldr	r1, [pc, #596]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	e0f5      	b.n	80030a4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8085 	beq.w	8002fce <HAL_RCC_OscConfig+0x516>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ed6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	461a      	mov	r2, r3
 8002eec:	2301      	movs	r3, #1
 8002eee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fe50 	bl	8001b94 <HAL_GetTick>
 8002ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe fe4b 	bl	8001b94 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	f000 bcd5 	b.w	80038ba <HAL_RCC_OscConfig+0xe02>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_OscConfig+0x488>
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0x4b0>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f72:	fa92 f2a2 	rbit	r2, r2
 8002f76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f7e:	fab2 f282 	clz	r2, r2
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	f042 0220 	orr.w	r2, r2, #32
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f002 021f 	and.w	r2, r2, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f202 	lsl.w	r2, r1, r2
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0af      	beq.n	8002efa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b5b      	ldr	r3, [pc, #364]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	21f8      	movs	r1, #248	; 0xf8
 8002faa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fb2:	fa91 f1a1 	rbit	r1, r1
 8002fb6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fba:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fbe:	fab1 f181 	clz	r1, r1
 8002fc2:	b2c9      	uxtb	r1, r1
 8002fc4:	408b      	lsls	r3, r1
 8002fc6:	4950      	ldr	r1, [pc, #320]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e06a      	b.n	80030a4 <HAL_RCC_OscConfig+0x5ec>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fdcb 	bl	8001b94 <HAL_GetTick>
 8002ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003004:	f7fe fdc6 	bl	8001b94 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	f000 bc50 	b.w	80038ba <HAL_RCC_OscConfig+0xe02>
 800301a:	2302      	movs	r3, #2
 800301c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800302c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d102      	bne.n	800304a <HAL_RCC_OscConfig+0x592>
 8003044:	4b30      	ldr	r3, [pc, #192]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	e013      	b.n	8003072 <HAL_RCC_OscConfig+0x5ba>
 800304a:	2302      	movs	r3, #2
 800304c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800305c:	2302      	movs	r3, #2
 800305e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003062:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <HAL_RCC_OscConfig+0x650>)
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2202      	movs	r2, #2
 8003074:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003078:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800307c:	fa92 f2a2 	rbit	r2, r2
 8003080:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003084:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f042 0220 	orr.w	r2, r2, #32
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f002 021f 	and.w	r2, r2, #31
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1af      	bne.n	8003004 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80da 	beq.w	8003268 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d069      	beq.n	8003192 <HAL_RCC_OscConfig+0x6da>
 80030be:	2301      	movs	r3, #1
 80030c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80030d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x654>)
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	461a      	mov	r2, r3
 80030e4:	2301      	movs	r3, #1
 80030e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7fe fd54 	bl	8001b94 <HAL_GetTick>
 80030ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f0:	e00e      	b.n	8003110 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f2:	f7fe fd4f 	bl	8001b94 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d906      	bls.n	8003110 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e3d9      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	10908120 	.word	0x10908120
 8003110:	2302      	movs	r3, #2
 8003112:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003122:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003126:	2202      	movs	r2, #2
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fa93 f2a3 	rbit	r2, r3
 8003134:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800313e:	2202      	movs	r2, #2
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003150:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003152:	4ba5      	ldr	r3, [pc, #660]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003156:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800315a:	2102      	movs	r1, #2
 800315c:	6019      	str	r1, [r3, #0]
 800315e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f1a3 	rbit	r1, r3
 8003168:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800316c:	6019      	str	r1, [r3, #0]
  return result;
 800316e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0b0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x63a>
 8003190:	e06a      	b.n	8003268 <HAL_RCC_OscConfig+0x7b0>
 8003192:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031a8:	601a      	str	r2, [r3, #0]
  return result;
 80031aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCC_OscConfig+0x934>)
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	461a      	mov	r2, r3
 80031c0:	2300      	movs	r3, #0
 80031c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7fe fce6 	bl	8001b94 <HAL_GetTick>
 80031c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	e009      	b.n	80031e2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fe fce1 	bl	8001b94 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e36b      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
 80031e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80031e6:	2202      	movs	r2, #2
 80031e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	fa93 f2a3 	rbit	r2, r3
 80031f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003216:	2202      	movs	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003228:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 800322c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800322e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003232:	2102      	movs	r1, #2
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f1a3 	rbit	r1, r3
 8003240:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003244:	6019      	str	r1, [r3, #0]
  return result;
 8003246:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	2101      	movs	r1, #1
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1b2      	bne.n	80031ce <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8158 	beq.w	8003528 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003278:	2300      	movs	r3, #0
 800327a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327e:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d112      	bne.n	80032b0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	4a56      	ldr	r2, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	61d3      	str	r3, [r2, #28]
 8003296:	4b54      	ldr	r3, [pc, #336]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f107 0308 	add.w	r3, r7, #8
 80032a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b4f      	ldr	r3, [pc, #316]	; (80033f0 <HAL_RCC_OscConfig+0x938>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11a      	bne.n	80032f2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x938>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_RCC_OscConfig+0x938>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c8:	f7fe fc64 	bl	8001b94 <HAL_GetTick>
 80032cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	e009      	b.n	80032e6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fe fc5f 	bl	8001b94 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e2e9      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <HAL_RCC_OscConfig+0x938>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ef      	beq.n	80032d2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x852>
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4a39      	ldr	r2, [pc, #228]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	e02f      	b.n	800336a <HAL_RCC_OscConfig+0x8b2>
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0x876>
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6213      	str	r3, [r2, #32]
 800332c:	e01d      	b.n	800336a <HAL_RCC_OscConfig+0x8b2>
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x89a>
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x8b2>
 8003352:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a24      	ldr	r2, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d06b      	beq.n	800344c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003374:	f7fe fc0e 	bl	8001b94 <HAL_GetTick>
 8003378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	e00b      	b.n	8003396 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe fc09 	bl	8001b94 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e291      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
 8003396:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800339a:	2202      	movs	r2, #2
 800339c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033b2:	2202      	movs	r2, #2
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033c4:	601a      	str	r2, [r3, #0]
  return result;
 80033c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d109      	bne.n	80033f4 <HAL_RCC_OscConfig+0x93c>
 80033e0:	4b01      	ldr	r3, [pc, #4]	; (80033e8 <HAL_RCC_OscConfig+0x930>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x958>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	10908120 	.word	0x10908120
 80033f0:	40007000 	.word	0x40007000
 80033f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80033f8:	2202      	movs	r2, #2
 80033fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	4bbb      	ldr	r3, [pc, #748]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003414:	2102      	movs	r1, #2
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	fa92 f1a2 	rbit	r1, r2
 8003422:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003426:	6011      	str	r1, [r2, #0]
  return result;
 8003428:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d099      	beq.n	800337e <HAL_RCC_OscConfig+0x8c6>
 800344a:	e063      	b.n	8003514 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344c:	f7fe fba2 	bl	8001b94 <HAL_GetTick>
 8003450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	e00b      	b.n	800346e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fb9d 	bl	8001b94 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e225      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
 800346e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003472:	2202      	movs	r2, #2
 8003474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	fa93 f2a3 	rbit	r2, r3
 8003480:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800348a:	2202      	movs	r2, #2
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800349c:	601a      	str	r2, [r3, #0]
  return result;
 800349e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0xa06>
 80034b8:	4b90      	ldr	r3, [pc, #576]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	e00d      	b.n	80034da <HAL_RCC_OscConfig+0xa22>
 80034be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034c2:	2202      	movs	r2, #2
 80034c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80034de:	2102      	movs	r1, #2
 80034e0:	6011      	str	r1, [r2, #0]
 80034e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	fa92 f1a2 	rbit	r1, r2
 80034ec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80034f0:	6011      	str	r1, [r2, #0]
  return result;
 80034f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	fab2 f282 	clz	r2, r2
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	f002 021f 	and.w	r2, r2, #31
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f202 	lsl.w	r2, r1, r2
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1a0      	bne.n	8003456 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003514:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351c:	4b77      	ldr	r3, [pc, #476]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4a76      	ldr	r2, [pc, #472]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 8003522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003526:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 81c2 	beq.w	80038b8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003534:	4b71      	ldr	r3, [pc, #452]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	f000 819c 	beq.w	800387a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2b02      	cmp	r3, #2
 800354a:	f040 8114 	bne.w	8003776 <HAL_RCC_OscConfig+0xcbe>
 800354e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003552:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fa93 f2a3 	rbit	r2, r3
 8003562:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003566:	601a      	str	r2, [r3, #0]
  return result;
 8003568:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800356c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	461a      	mov	r2, r3
 8003580:	2300      	movs	r3, #0
 8003582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fb06 	bl	8001b94 <HAL_GetTick>
 8003588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358c:	e009      	b.n	80035a2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe fb01 	bl	8001b94 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e18b      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
 80035a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	fa93 f2a3 	rbit	r2, r3
 80035b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035ba:	601a      	str	r2, [r3, #0]
  return result;
 80035bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_OscConfig+0xb24>
 80035d6:	4b49      	ldr	r3, [pc, #292]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	e01b      	b.n	8003614 <HAL_RCC_OscConfig+0xb5c>
 80035dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f2a3 	rbit	r2, r3
 80035f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	fa92 f1a2 	rbit	r1, r2
 8003628:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800362c:	6011      	str	r1, [r2, #0]
  return result;
 800362e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	fab2 f282 	clz	r2, r2
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f002 021f 	and.w	r2, r2, #31
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d19e      	bne.n	800358e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	430b      	orrs	r3, r1
 8003666:	4925      	ldr	r1, [pc, #148]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	fa93 f2a3 	rbit	r2, r3
 8003680:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003684:	601a      	str	r2, [r3, #0]
  return result;
 8003686:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800368a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003696:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	461a      	mov	r2, r3
 800369e:	2301      	movs	r3, #1
 80036a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fa77 	bl	8001b94 <HAL_GetTick>
 80036a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036aa:	e009      	b.n	80036c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fa72 	bl	8001b94 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0fc      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
 80036c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036d8:	601a      	str	r2, [r3, #0]
  return result;
 80036da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0xc48>
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <HAL_RCC_OscConfig+0xc44>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	e01e      	b.n	8003738 <HAL_RCC_OscConfig+0xc80>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800371e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f2a3 	rbit	r2, r3
 800372e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <HAL_RCC_OscConfig+0xe0c>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800373c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003740:	6011      	str	r1, [r2, #0]
 8003742:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	fa92 f1a2 	rbit	r1, r2
 800374c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003750:	6011      	str	r1, [r2, #0]
  return result;
 8003752:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f002 021f 	and.w	r2, r2, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d09b      	beq.n	80036ac <HAL_RCC_OscConfig+0xbf4>
 8003774:	e0a0      	b.n	80038b8 <HAL_RCC_OscConfig+0xe00>
 8003776:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800377a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800377e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	fa93 f2a3 	rbit	r2, r3
 800378a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378e:	601a      	str	r2, [r3, #0]
  return result;
 8003790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003794:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe f9f2 	bl	8001b94 <HAL_GetTick>
 80037b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b4:	e009      	b.n	80037ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fe f9ed 	bl	8001b94 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e077      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
 80037ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	fa93 f2a3 	rbit	r2, r3
 80037de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e2:	601a      	str	r2, [r3, #0]
  return result;
 80037e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_RCC_OscConfig+0xd4c>
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCC_OscConfig+0xe0c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	e01b      	b.n	800383c <HAL_RCC_OscConfig+0xd84>
 8003804:	f107 0320 	add.w	r3, r7, #32
 8003808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800380c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f107 0320 	add.w	r3, r7, #32
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f107 0318 	add.w	r3, r7, #24
 8003822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f107 0318 	add.w	r3, r7, #24
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fa93 f2a3 	rbit	r2, r3
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <HAL_RCC_OscConfig+0xe0c>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f107 0210 	add.w	r2, r7, #16
 8003840:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003844:	6011      	str	r1, [r2, #0]
 8003846:	f107 0210 	add.w	r2, r7, #16
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	fa92 f1a2 	rbit	r1, r2
 8003850:	f107 020c 	add.w	r2, r7, #12
 8003854:	6011      	str	r1, [r2, #0]
  return result;
 8003856:	f107 020c 	add.w	r2, r7, #12
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	fab2 f282 	clz	r2, r2
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f042 0220 	orr.w	r2, r2, #32
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f002 021f 	and.w	r2, r2, #31
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f202 	lsl.w	r2, r1, r2
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d19e      	bne.n	80037b6 <HAL_RCC_OscConfig+0xcfe>
 8003878:	e01e      	b.n	80038b8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e018      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_RCC_OscConfig+0xe0c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003890:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003894:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d108      	bne.n	80038b4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000

080038c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b09e      	sub	sp, #120	; 0x78
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e162      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b90      	ldr	r3, [pc, #576]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d910      	bls.n	8003910 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b8d      	ldr	r3, [pc, #564]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 0207 	bic.w	r2, r3, #7
 80038f6:	498b      	ldr	r1, [pc, #556]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b89      	ldr	r3, [pc, #548]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e14a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	497f      	ldr	r1, [pc, #508]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80dc 	beq.w	8003af4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d13c      	bne.n	80039be <HAL_RCC_ClockConfig+0xf6>
 8003944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003948:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d102      	bne.n	800396e <HAL_RCC_ClockConfig+0xa6>
 8003968:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	e00f      	b.n	800398e <HAL_RCC_ClockConfig+0xc6>
 800396e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003972:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	667b      	str	r3, [r7, #100]	; 0x64
 800397c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003980:	663b      	str	r3, [r7, #96]	; 0x60
 8003982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003992:	65ba      	str	r2, [r7, #88]	; 0x58
 8003994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003996:	fa92 f2a2 	rbit	r2, r2
 800399a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800399c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800399e:	fab2 f282 	clz	r2, r2
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	f042 0220 	orr.w	r2, r2, #32
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f002 021f 	and.w	r2, r2, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d17b      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0f3      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d13c      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x178>
 80039c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x128>
 80039ea:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e00f      	b.n	8003a10 <HAL_RCC_ClockConfig+0x148>
 80039f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
 80039fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
 8003a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a14:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a18:	fa92 f2a2 	rbit	r2, r2
 8003a1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a20:	fab2 f282 	clz	r2, r2
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	f042 0220 	orr.w	r2, r2, #32
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f002 021f 	and.w	r2, r2, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d13a      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0b2      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x2de>
 8003a40:	2302      	movs	r3, #2
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x1a0>
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	e00d      	b.n	8003a84 <HAL_RCC_ClockConfig+0x1bc>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
 8003a74:	2302      	movs	r3, #2
 8003a76:	623b      	str	r3, [r7, #32]
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	fa93 f3a3 	rbit	r3, r3
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2202      	movs	r2, #2
 8003a86:	61ba      	str	r2, [r7, #24]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	fa92 f2a2 	rbit	r2, r2
 8003a8e:	617a      	str	r2, [r7, #20]
  return result;
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	fab2 f282 	clz	r2, r2
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	f042 0220 	orr.w	r2, r2, #32
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	f002 021f 	and.w	r2, r2, #31
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e079      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	491a      	ldr	r1, [pc, #104]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe f866 	bl	8001b94 <HAL_GetTick>
 8003ac8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe f862 	bl	8001b94 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e061      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d214      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 0207 	bic.w	r2, r3, #7
 8003b0a:	4906      	ldr	r1, [pc, #24]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <HAL_RCC_ClockConfig+0x25c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e040      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x2de>
 8003b24:	40022000 	.word	0x40022000
 8003b28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	491a      	ldr	r1, [pc, #104]	; (8003bb0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4912      	ldr	r1, [pc, #72]	; (8003bb0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b6a:	f000 f829 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4601      	mov	r1, r0
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b78:	22f0      	movs	r2, #240	; 0xf0
 8003b7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	fa92 f2a2 	rbit	r2, r2
 8003b82:	60fa      	str	r2, [r7, #12]
  return result;
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	fab2 f282 	clz	r2, r2
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	40d3      	lsrs	r3, r2
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x2ec>)
 8003b90:	5cd3      	ldrb	r3, [r2, r3]
 8003b92:	fa21 f303 	lsr.w	r3, r1, r3
 8003b96:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <HAL_RCC_ClockConfig+0x2f0>)
 8003b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_RCC_ClockConfig+0x2f4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd ffb4 	bl	8001b0c <HAL_InitTick>
  
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3778      	adds	r7, #120	; 0x78
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	0800585c 	.word	0x0800585c
 8003bb8:	2000000c 	.word	0x2000000c
 8003bbc:	20000010 	.word	0x20000010

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b08b      	sub	sp, #44	; 0x2c
 8003bc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d002      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x30>
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x36>
 8003bee:	e03c      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bf0:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bf2:	623b      	str	r3, [r7, #32]
      break;
 8003bf4:	e03c      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003bfc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c00:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	fa92 f2a2 	rbit	r2, r2
 8003c08:	607a      	str	r2, [r7, #4]
  return result;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	fab2 f282 	clz	r2, r2
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	40d3      	lsrs	r3, r2
 8003c14:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c1a:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	220f      	movs	r2, #15
 8003c24:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	fa92 f2a2 	rbit	r2, r2
 8003c2c:	60fa      	str	r2, [r7, #12]
  return result;
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	40d3      	lsrs	r3, r2
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c48:	4a0e      	ldr	r2, [pc, #56]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	e004      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	623b      	str	r3, [r7, #32]
      break;
 8003c68:	e002      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c6c:	623b      	str	r3, [r7, #32]
      break;
 8003c6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c70:	6a3b      	ldr	r3, [r7, #32]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	372c      	adds	r7, #44	; 0x2c
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	007a1200 	.word	0x007a1200
 8003c88:	08005874 	.word	0x08005874
 8003c8c:	08005884 	.word	0x08005884
 8003c90:	003d0900 	.word	0x003d0900

08003c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	2000000c 	.word	0x2000000c

08003cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cb2:	f7ff ffef 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb6:	4601      	mov	r1, r0
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cc0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	fa92 f2a2 	rbit	r2, r2
 8003ccc:	603a      	str	r2, [r7, #0]
  return result;
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	fab2 f282 	clz	r2, r2
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	40d3      	lsrs	r3, r2
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x40>)
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	0800586c 	.word	0x0800586c

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003cf6:	f7ff ffcd 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d04:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	fa92 f2a2 	rbit	r2, r2
 8003d10:	603a      	str	r2, [r7, #0]
  return result;
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	40d3      	lsrs	r3, r2
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	0800586c 	.word	0x0800586c

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b092      	sub	sp, #72	; 0x48
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80d0 	beq.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d58:	4b86      	ldr	r3, [pc, #536]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10e      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b83      	ldr	r3, [pc, #524]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4a82      	ldr	r2, [pc, #520]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	61d3      	str	r3, [r2, #28]
 8003d70:	4b80      	ldr	r3, [pc, #512]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	4b7d      	ldr	r3, [pc, #500]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d118      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d8e:	4b7a      	ldr	r3, [pc, #488]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a79      	ldr	r2, [pc, #484]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9a:	f7fd fefb 	bl	8001b94 <HAL_GetTick>
 8003d9e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	e008      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da2:	f7fd fef7 	bl	8001b94 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b64      	cmp	r3, #100	; 0x64
 8003dae:	d901      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0db      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	4b70      	ldr	r3, [pc, #448]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dc0:	4b6c      	ldr	r3, [pc, #432]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d07d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d076      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dde:	4b65      	ldr	r3, [pc, #404]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df8:	fab3 f383 	clz	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	461a      	mov	r2, r3
 8003e08:	2301      	movs	r3, #1
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b55      	ldr	r3, [pc, #340]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e30:	4a50      	ldr	r2, [pc, #320]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e34:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d045      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd fea8 	bl	8001b94 <HAL_GetTick>
 8003e44:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd fea4 	bl	8001b94 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e086      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	623b      	str	r3, [r7, #32]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	61fb      	str	r3, [r7, #28]
  return result;
 8003e76:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d102      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e8c:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	e007      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003e92:	2302      	movs	r3, #2
 8003e94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	613a      	str	r2, [r7, #16]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	fa92 f2a2 	rbit	r2, r2
 8003eac:	60fa      	str	r2, [r7, #12]
  return result;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	fab2 f282 	clz	r2, r2
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	f002 021f 	and.w	r2, r2, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0bd      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ecc:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4926      	ldr	r1, [pc, #152]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ede:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee6:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f023 0203 	bic.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	491a      	ldr	r1, [pc, #104]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f023 0210 	bic.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4912      	ldr	r1, [pc, #72]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	490b      	ldr	r1, [pc, #44]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	4903      	ldr	r1, [pc, #12]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3748      	adds	r7, #72	; 0x48
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	10908100 	.word	0x10908100

08003f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e040      	b.n	8004014 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fa3e 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8c0 	bl	8004144 <UART_SetConfig>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e022      	b.n	8004014 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa36 	bl	8004448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fabd 	bl	800458c <UART_CheckIdleState>
 8004012:	4603      	mov	r3, r0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	2b20      	cmp	r3, #32
 8004032:	f040 8081 	bne.w	8004138 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_UART_Transmit+0x26>
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e079      	b.n	800413a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_UART_Transmit+0x38>
 8004050:	2302      	movs	r3, #2
 8004052:	e072      	b.n	800413a <HAL_UART_Transmit+0x11e>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2221      	movs	r2, #33	; 0x21
 8004066:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004068:	f7fd fd94 	bl	8001b94 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d108      	bne.n	800409a <HAL_UART_Transmit+0x7e>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e003      	b.n	80040a2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040a2:	e02d      	b.n	8004100 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2200      	movs	r2, #0
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fab1 	bl	8004616 <UART_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e03d      	b.n	800413a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	881a      	ldrh	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d0:	b292      	uxth	r2, r2
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	3302      	adds	r3, #2
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e008      	b.n	80040ee <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	b292      	uxth	r2, r2
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1cb      	bne.n	80040a4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa7d 	bl	8004616 <UART_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e009      	b.n	800413a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4ba2      	ldr	r3, [pc, #648]	; (80043fc <UART_SetConfig+0x2b8>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	6939      	ldr	r1, [r7, #16]
 800417c:	430b      	orrs	r3, r1
 800417e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a90      	ldr	r2, [pc, #576]	; (8004400 <UART_SetConfig+0x2bc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d121      	bne.n	8004208 <UART_SetConfig+0xc4>
 80041c4:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <UART_SetConfig+0x2c0>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d817      	bhi.n	8004200 <UART_SetConfig+0xbc>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0x94>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041f5 	.word	0x080041f5
 80041e0:	080041fb 	.word	0x080041fb
 80041e4:	080041ef 	.word	0x080041ef
 80041e8:	2300      	movs	r3, #0
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e01e      	b.n	800422c <UART_SetConfig+0xe8>
 80041ee:	2302      	movs	r3, #2
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e01b      	b.n	800422c <UART_SetConfig+0xe8>
 80041f4:	2304      	movs	r3, #4
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e018      	b.n	800422c <UART_SetConfig+0xe8>
 80041fa:	2308      	movs	r3, #8
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e015      	b.n	800422c <UART_SetConfig+0xe8>
 8004200:	2310      	movs	r3, #16
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	bf00      	nop
 8004206:	e011      	b.n	800422c <UART_SetConfig+0xe8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7e      	ldr	r2, [pc, #504]	; (8004408 <UART_SetConfig+0x2c4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d102      	bne.n	8004218 <UART_SetConfig+0xd4>
 8004212:	2300      	movs	r3, #0
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e009      	b.n	800422c <UART_SetConfig+0xe8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a7b      	ldr	r2, [pc, #492]	; (800440c <UART_SetConfig+0x2c8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d102      	bne.n	8004228 <UART_SetConfig+0xe4>
 8004222:	2300      	movs	r3, #0
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e001      	b.n	800422c <UART_SetConfig+0xe8>
 8004228:	2310      	movs	r3, #16
 800422a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004234:	f040 8082 	bne.w	800433c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	2b08      	cmp	r3, #8
 800423c:	d85e      	bhi.n	80042fc <UART_SetConfig+0x1b8>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0x100>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004269 	.word	0x08004269
 8004248:	08004289 	.word	0x08004289
 800424c:	080042a9 	.word	0x080042a9
 8004250:	080042fd 	.word	0x080042fd
 8004254:	080042c5 	.word	0x080042c5
 8004258:	080042fd 	.word	0x080042fd
 800425c:	080042fd 	.word	0x080042fd
 8004260:	080042fd 	.word	0x080042fd
 8004264:	080042e5 	.word	0x080042e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004268:	f7ff fd20 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 800426c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	005a      	lsls	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	441a      	add	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	61bb      	str	r3, [r7, #24]
        break;
 8004286:	e03c      	b.n	8004302 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004288:	f7ff fd32 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 800428c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	005a      	lsls	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	61bb      	str	r3, [r7, #24]
        break;
 80042a6:	e02c      	b.n	8004302 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80042b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6852      	ldr	r2, [r2, #4]
 80042ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	61bb      	str	r3, [r7, #24]
        break;
 80042c2:	e01e      	b.n	8004302 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c4:	f7ff fc7c 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 80042c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	005a      	lsls	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	fbb2 f3f3 	udiv	r3, r2, r3
 80042de:	b29b      	uxth	r3, r3
 80042e0:	61bb      	str	r3, [r7, #24]
        break;
 80042e2:	e00e      	b.n	8004302 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	61bb      	str	r3, [r7, #24]
        break;
 80042fa:	e002      	b.n	8004302 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
        break;
 8004300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b0f      	cmp	r3, #15
 8004306:	d916      	bls.n	8004336 <UART_SetConfig+0x1f2>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430e:	d212      	bcs.n	8004336 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f023 030f 	bic.w	r3, r3, #15
 8004318:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	b29a      	uxth	r2, r3
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	4313      	orrs	r3, r2
 800432a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	897a      	ldrh	r2, [r7, #10]
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	e07d      	b.n	8004432 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
 800433a:	e07a      	b.n	8004432 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 800433c:	7ffb      	ldrb	r3, [r7, #31]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d866      	bhi.n	8004410 <UART_SetConfig+0x2cc>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x204>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800436d 	.word	0x0800436d
 800434c:	0800438b 	.word	0x0800438b
 8004350:	080043a9 	.word	0x080043a9
 8004354:	08004411 	.word	0x08004411
 8004358:	080043c5 	.word	0x080043c5
 800435c:	08004411 	.word	0x08004411
 8004360:	08004411 	.word	0x08004411
 8004364:	08004411 	.word	0x08004411
 8004368:	080043e3 	.word	0x080043e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7ff fc9e 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 8004370:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085a      	lsrs	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	441a      	add	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	b29b      	uxth	r3, r3
 8004386:	61bb      	str	r3, [r7, #24]
        break;
 8004388:	e045      	b.n	8004416 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800438a:	f7ff fcb1 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 800438e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	085a      	lsrs	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	61bb      	str	r3, [r7, #24]
        break;
 80043a6:	e036      	b.n	8004416 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80043b2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6852      	ldr	r2, [r2, #4]
 80043ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80043be:	b29b      	uxth	r3, r3
 80043c0:	61bb      	str	r3, [r7, #24]
        break;
 80043c2:	e028      	b.n	8004416 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c4:	f7ff fbfc 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 80043c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	085a      	lsrs	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	441a      	add	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	61bb      	str	r3, [r7, #24]
        break;
 80043e0:	e019      	b.n	8004416 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	61bb      	str	r3, [r7, #24]
        break;
 80043f8:	e00d      	b.n	8004416 <UART_SetConfig+0x2d2>
 80043fa:	bf00      	nop
 80043fc:	efff69f3 	.word	0xefff69f3
 8004400:	40013800 	.word	0x40013800
 8004404:	40021000 	.word	0x40021000
 8004408:	40004400 	.word	0x40004400
 800440c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
        break;
 8004414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b0f      	cmp	r3, #15
 800441a:	d908      	bls.n	800442e <UART_SetConfig+0x2ea>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004422:	d204      	bcs.n	800442e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	e001      	b.n	8004432 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01a      	beq.n	800455e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004546:	d10a      	bne.n	800455e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]
  }
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af02      	add	r7, sp, #8
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800459a:	f7fd fafb 	bl	8001b94 <HAL_GetTick>
 800459e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d10e      	bne.n	80045cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f82a 	bl	8004616 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e020      	b.n	800460e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d10e      	bne.n	80045f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f814 	bl	8004616 <UART_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e00a      	b.n	800460e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004626:	e05d      	b.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462e:	d059      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004630:	f7fd fab0 	bl	8001b94 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	429a      	cmp	r2, r3
 800463e:	d302      	bcc.n	8004646 <UART_WaitOnFlagUntilTimeout+0x30>
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11b      	bne.n	800467e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004654:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e042      	b.n	8004704 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d02b      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469a:	d123      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e00f      	b.n	8004704 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4013      	ands	r3, r2
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d092      	beq.n	8004628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <__errno>:
 800470c:	4b01      	ldr	r3, [pc, #4]	; (8004714 <__errno+0x8>)
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000018 	.word	0x20000018

08004718 <__libc_init_array>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4e0d      	ldr	r6, [pc, #52]	; (8004750 <__libc_init_array+0x38>)
 800471c:	4c0d      	ldr	r4, [pc, #52]	; (8004754 <__libc_init_array+0x3c>)
 800471e:	1ba4      	subs	r4, r4, r6
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	2500      	movs	r5, #0
 8004724:	42a5      	cmp	r5, r4
 8004726:	d109      	bne.n	800473c <__libc_init_array+0x24>
 8004728:	4e0b      	ldr	r6, [pc, #44]	; (8004758 <__libc_init_array+0x40>)
 800472a:	4c0c      	ldr	r4, [pc, #48]	; (800475c <__libc_init_array+0x44>)
 800472c:	f000 ff68 	bl	8005600 <_init>
 8004730:	1ba4      	subs	r4, r4, r6
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	2500      	movs	r5, #0
 8004736:	42a5      	cmp	r5, r4
 8004738:	d105      	bne.n	8004746 <__libc_init_array+0x2e>
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004740:	4798      	blx	r3
 8004742:	3501      	adds	r5, #1
 8004744:	e7ee      	b.n	8004724 <__libc_init_array+0xc>
 8004746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800474a:	4798      	blx	r3
 800474c:	3501      	adds	r5, #1
 800474e:	e7f2      	b.n	8004736 <__libc_init_array+0x1e>
 8004750:	0800592c 	.word	0x0800592c
 8004754:	0800592c 	.word	0x0800592c
 8004758:	0800592c 	.word	0x0800592c
 800475c:	08005930 	.word	0x08005930

08004760 <memset>:
 8004760:	4402      	add	r2, r0
 8004762:	4603      	mov	r3, r0
 8004764:	4293      	cmp	r3, r2
 8004766:	d100      	bne.n	800476a <memset+0xa>
 8004768:	4770      	bx	lr
 800476a:	f803 1b01 	strb.w	r1, [r3], #1
 800476e:	e7f9      	b.n	8004764 <memset+0x4>

08004770 <iprintf>:
 8004770:	b40f      	push	{r0, r1, r2, r3}
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <iprintf+0x2c>)
 8004774:	b513      	push	{r0, r1, r4, lr}
 8004776:	681c      	ldr	r4, [r3, #0]
 8004778:	b124      	cbz	r4, 8004784 <iprintf+0x14>
 800477a:	69a3      	ldr	r3, [r4, #24]
 800477c:	b913      	cbnz	r3, 8004784 <iprintf+0x14>
 800477e:	4620      	mov	r0, r4
 8004780:	f000 fa22 	bl	8004bc8 <__sinit>
 8004784:	ab05      	add	r3, sp, #20
 8004786:	9a04      	ldr	r2, [sp, #16]
 8004788:	68a1      	ldr	r1, [r4, #8]
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	4620      	mov	r0, r4
 800478e:	f000 fbdb 	bl	8004f48 <_vfiprintf_r>
 8004792:	b002      	add	sp, #8
 8004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004798:	b004      	add	sp, #16
 800479a:	4770      	bx	lr
 800479c:	20000018 	.word	0x20000018

080047a0 <_puts_r>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	460e      	mov	r6, r1
 80047a4:	4605      	mov	r5, r0
 80047a6:	b118      	cbz	r0, 80047b0 <_puts_r+0x10>
 80047a8:	6983      	ldr	r3, [r0, #24]
 80047aa:	b90b      	cbnz	r3, 80047b0 <_puts_r+0x10>
 80047ac:	f000 fa0c 	bl	8004bc8 <__sinit>
 80047b0:	69ab      	ldr	r3, [r5, #24]
 80047b2:	68ac      	ldr	r4, [r5, #8]
 80047b4:	b913      	cbnz	r3, 80047bc <_puts_r+0x1c>
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fa06 	bl	8004bc8 <__sinit>
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <_puts_r+0xac>)
 80047be:	429c      	cmp	r4, r3
 80047c0:	d117      	bne.n	80047f2 <_puts_r+0x52>
 80047c2:	686c      	ldr	r4, [r5, #4]
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	071b      	lsls	r3, r3, #28
 80047c8:	d51d      	bpl.n	8004806 <_puts_r+0x66>
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	b1db      	cbz	r3, 8004806 <_puts_r+0x66>
 80047ce:	3e01      	subs	r6, #1
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047d6:	3b01      	subs	r3, #1
 80047d8:	60a3      	str	r3, [r4, #8]
 80047da:	b9e9      	cbnz	r1, 8004818 <_puts_r+0x78>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da2e      	bge.n	800483e <_puts_r+0x9e>
 80047e0:	4622      	mov	r2, r4
 80047e2:	210a      	movs	r1, #10
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f83f 	bl	8004868 <__swbuf_r>
 80047ea:	3001      	adds	r0, #1
 80047ec:	d011      	beq.n	8004812 <_puts_r+0x72>
 80047ee:	200a      	movs	r0, #10
 80047f0:	e011      	b.n	8004816 <_puts_r+0x76>
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <_puts_r+0xb0>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	d101      	bne.n	80047fc <_puts_r+0x5c>
 80047f8:	68ac      	ldr	r4, [r5, #8]
 80047fa:	e7e3      	b.n	80047c4 <_puts_r+0x24>
 80047fc:	4b15      	ldr	r3, [pc, #84]	; (8004854 <_puts_r+0xb4>)
 80047fe:	429c      	cmp	r4, r3
 8004800:	bf08      	it	eq
 8004802:	68ec      	ldreq	r4, [r5, #12]
 8004804:	e7de      	b.n	80047c4 <_puts_r+0x24>
 8004806:	4621      	mov	r1, r4
 8004808:	4628      	mov	r0, r5
 800480a:	f000 f87f 	bl	800490c <__swsetup_r>
 800480e:	2800      	cmp	r0, #0
 8004810:	d0dd      	beq.n	80047ce <_puts_r+0x2e>
 8004812:	f04f 30ff 	mov.w	r0, #4294967295
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	2b00      	cmp	r3, #0
 800481a:	da04      	bge.n	8004826 <_puts_r+0x86>
 800481c:	69a2      	ldr	r2, [r4, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	dc06      	bgt.n	8004830 <_puts_r+0x90>
 8004822:	290a      	cmp	r1, #10
 8004824:	d004      	beq.n	8004830 <_puts_r+0x90>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	7019      	strb	r1, [r3, #0]
 800482e:	e7cf      	b.n	80047d0 <_puts_r+0x30>
 8004830:	4622      	mov	r2, r4
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f818 	bl	8004868 <__swbuf_r>
 8004838:	3001      	adds	r0, #1
 800483a:	d1c9      	bne.n	80047d0 <_puts_r+0x30>
 800483c:	e7e9      	b.n	8004812 <_puts_r+0x72>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	200a      	movs	r0, #10
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	6022      	str	r2, [r4, #0]
 8004846:	7018      	strb	r0, [r3, #0]
 8004848:	e7e5      	b.n	8004816 <_puts_r+0x76>
 800484a:	bf00      	nop
 800484c:	080058b8 	.word	0x080058b8
 8004850:	080058d8 	.word	0x080058d8
 8004854:	08005898 	.word	0x08005898

08004858 <puts>:
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <puts+0xc>)
 800485a:	4601      	mov	r1, r0
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f7ff bf9f 	b.w	80047a0 <_puts_r>
 8004862:	bf00      	nop
 8004864:	20000018 	.word	0x20000018

08004868 <__swbuf_r>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	460e      	mov	r6, r1
 800486c:	4614      	mov	r4, r2
 800486e:	4605      	mov	r5, r0
 8004870:	b118      	cbz	r0, 800487a <__swbuf_r+0x12>
 8004872:	6983      	ldr	r3, [r0, #24]
 8004874:	b90b      	cbnz	r3, 800487a <__swbuf_r+0x12>
 8004876:	f000 f9a7 	bl	8004bc8 <__sinit>
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <__swbuf_r+0x98>)
 800487c:	429c      	cmp	r4, r3
 800487e:	d12a      	bne.n	80048d6 <__swbuf_r+0x6e>
 8004880:	686c      	ldr	r4, [r5, #4]
 8004882:	69a3      	ldr	r3, [r4, #24]
 8004884:	60a3      	str	r3, [r4, #8]
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	071a      	lsls	r2, r3, #28
 800488a:	d52e      	bpl.n	80048ea <__swbuf_r+0x82>
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	b363      	cbz	r3, 80048ea <__swbuf_r+0x82>
 8004890:	6923      	ldr	r3, [r4, #16]
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	1ac0      	subs	r0, r0, r3
 8004896:	6963      	ldr	r3, [r4, #20]
 8004898:	b2f6      	uxtb	r6, r6
 800489a:	4283      	cmp	r3, r0
 800489c:	4637      	mov	r7, r6
 800489e:	dc04      	bgt.n	80048aa <__swbuf_r+0x42>
 80048a0:	4621      	mov	r1, r4
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 f926 	bl	8004af4 <_fflush_r>
 80048a8:	bb28      	cbnz	r0, 80048f6 <__swbuf_r+0x8e>
 80048aa:	68a3      	ldr	r3, [r4, #8]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	60a3      	str	r3, [r4, #8]
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	6022      	str	r2, [r4, #0]
 80048b6:	701e      	strb	r6, [r3, #0]
 80048b8:	6963      	ldr	r3, [r4, #20]
 80048ba:	3001      	adds	r0, #1
 80048bc:	4283      	cmp	r3, r0
 80048be:	d004      	beq.n	80048ca <__swbuf_r+0x62>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	07db      	lsls	r3, r3, #31
 80048c4:	d519      	bpl.n	80048fa <__swbuf_r+0x92>
 80048c6:	2e0a      	cmp	r6, #10
 80048c8:	d117      	bne.n	80048fa <__swbuf_r+0x92>
 80048ca:	4621      	mov	r1, r4
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 f911 	bl	8004af4 <_fflush_r>
 80048d2:	b190      	cbz	r0, 80048fa <__swbuf_r+0x92>
 80048d4:	e00f      	b.n	80048f6 <__swbuf_r+0x8e>
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <__swbuf_r+0x9c>)
 80048d8:	429c      	cmp	r4, r3
 80048da:	d101      	bne.n	80048e0 <__swbuf_r+0x78>
 80048dc:	68ac      	ldr	r4, [r5, #8]
 80048de:	e7d0      	b.n	8004882 <__swbuf_r+0x1a>
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <__swbuf_r+0xa0>)
 80048e2:	429c      	cmp	r4, r3
 80048e4:	bf08      	it	eq
 80048e6:	68ec      	ldreq	r4, [r5, #12]
 80048e8:	e7cb      	b.n	8004882 <__swbuf_r+0x1a>
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 f80d 	bl	800490c <__swsetup_r>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d0cc      	beq.n	8004890 <__swbuf_r+0x28>
 80048f6:	f04f 37ff 	mov.w	r7, #4294967295
 80048fa:	4638      	mov	r0, r7
 80048fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048fe:	bf00      	nop
 8004900:	080058b8 	.word	0x080058b8
 8004904:	080058d8 	.word	0x080058d8
 8004908:	08005898 	.word	0x08005898

0800490c <__swsetup_r>:
 800490c:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <__swsetup_r+0xcc>)
 800490e:	b570      	push	{r4, r5, r6, lr}
 8004910:	681d      	ldr	r5, [r3, #0]
 8004912:	4606      	mov	r6, r0
 8004914:	460c      	mov	r4, r1
 8004916:	b125      	cbz	r5, 8004922 <__swsetup_r+0x16>
 8004918:	69ab      	ldr	r3, [r5, #24]
 800491a:	b913      	cbnz	r3, 8004922 <__swsetup_r+0x16>
 800491c:	4628      	mov	r0, r5
 800491e:	f000 f953 	bl	8004bc8 <__sinit>
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <__swsetup_r+0xd0>)
 8004924:	429c      	cmp	r4, r3
 8004926:	d10f      	bne.n	8004948 <__swsetup_r+0x3c>
 8004928:	686c      	ldr	r4, [r5, #4]
 800492a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492e:	b29a      	uxth	r2, r3
 8004930:	0715      	lsls	r5, r2, #28
 8004932:	d42c      	bmi.n	800498e <__swsetup_r+0x82>
 8004934:	06d0      	lsls	r0, r2, #27
 8004936:	d411      	bmi.n	800495c <__swsetup_r+0x50>
 8004938:	2209      	movs	r2, #9
 800493a:	6032      	str	r2, [r6, #0]
 800493c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	e03e      	b.n	80049c6 <__swsetup_r+0xba>
 8004948:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <__swsetup_r+0xd4>)
 800494a:	429c      	cmp	r4, r3
 800494c:	d101      	bne.n	8004952 <__swsetup_r+0x46>
 800494e:	68ac      	ldr	r4, [r5, #8]
 8004950:	e7eb      	b.n	800492a <__swsetup_r+0x1e>
 8004952:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <__swsetup_r+0xd8>)
 8004954:	429c      	cmp	r4, r3
 8004956:	bf08      	it	eq
 8004958:	68ec      	ldreq	r4, [r5, #12]
 800495a:	e7e6      	b.n	800492a <__swsetup_r+0x1e>
 800495c:	0751      	lsls	r1, r2, #29
 800495e:	d512      	bpl.n	8004986 <__swsetup_r+0x7a>
 8004960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004962:	b141      	cbz	r1, 8004976 <__swsetup_r+0x6a>
 8004964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004968:	4299      	cmp	r1, r3
 800496a:	d002      	beq.n	8004972 <__swsetup_r+0x66>
 800496c:	4630      	mov	r0, r6
 800496e:	f000 fa19 	bl	8004da4 <_free_r>
 8004972:	2300      	movs	r3, #0
 8004974:	6363      	str	r3, [r4, #52]	; 0x34
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	2300      	movs	r3, #0
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f043 0308 	orr.w	r3, r3, #8
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	b94b      	cbnz	r3, 80049a6 <__swsetup_r+0x9a>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499c:	d003      	beq.n	80049a6 <__swsetup_r+0x9a>
 800499e:	4621      	mov	r1, r4
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f9bf 	bl	8004d24 <__smakebuf_r>
 80049a6:	89a2      	ldrh	r2, [r4, #12]
 80049a8:	f012 0301 	ands.w	r3, r2, #1
 80049ac:	d00c      	beq.n	80049c8 <__swsetup_r+0xbc>
 80049ae:	2300      	movs	r3, #0
 80049b0:	60a3      	str	r3, [r4, #8]
 80049b2:	6963      	ldr	r3, [r4, #20]
 80049b4:	425b      	negs	r3, r3
 80049b6:	61a3      	str	r3, [r4, #24]
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	b953      	cbnz	r3, 80049d2 <__swsetup_r+0xc6>
 80049bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80049c4:	d1ba      	bne.n	800493c <__swsetup_r+0x30>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	0792      	lsls	r2, r2, #30
 80049ca:	bf58      	it	pl
 80049cc:	6963      	ldrpl	r3, [r4, #20]
 80049ce:	60a3      	str	r3, [r4, #8]
 80049d0:	e7f2      	b.n	80049b8 <__swsetup_r+0xac>
 80049d2:	2000      	movs	r0, #0
 80049d4:	e7f7      	b.n	80049c6 <__swsetup_r+0xba>
 80049d6:	bf00      	nop
 80049d8:	20000018 	.word	0x20000018
 80049dc:	080058b8 	.word	0x080058b8
 80049e0:	080058d8 	.word	0x080058d8
 80049e4:	08005898 	.word	0x08005898

080049e8 <__sflush_r>:
 80049e8:	898a      	ldrh	r2, [r1, #12]
 80049ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	4605      	mov	r5, r0
 80049f0:	0710      	lsls	r0, r2, #28
 80049f2:	460c      	mov	r4, r1
 80049f4:	d458      	bmi.n	8004aa8 <__sflush_r+0xc0>
 80049f6:	684b      	ldr	r3, [r1, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dc05      	bgt.n	8004a08 <__sflush_r+0x20>
 80049fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	dc02      	bgt.n	8004a08 <__sflush_r+0x20>
 8004a02:	2000      	movs	r0, #0
 8004a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	d0f9      	beq.n	8004a02 <__sflush_r+0x1a>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a14:	682f      	ldr	r7, [r5, #0]
 8004a16:	6a21      	ldr	r1, [r4, #32]
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	d032      	beq.n	8004a82 <__sflush_r+0x9a>
 8004a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	075a      	lsls	r2, r3, #29
 8004a22:	d505      	bpl.n	8004a30 <__sflush_r+0x48>
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	1ac0      	subs	r0, r0, r3
 8004a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a2a:	b10b      	cbz	r3, 8004a30 <__sflush_r+0x48>
 8004a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a2e:	1ac0      	subs	r0, r0, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	4602      	mov	r2, r0
 8004a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a36:	6a21      	ldr	r1, [r4, #32]
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b0      	blx	r6
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	d106      	bne.n	8004a50 <__sflush_r+0x68>
 8004a42:	6829      	ldr	r1, [r5, #0]
 8004a44:	291d      	cmp	r1, #29
 8004a46:	d848      	bhi.n	8004ada <__sflush_r+0xf2>
 8004a48:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <__sflush_r+0x108>)
 8004a4a:	40ca      	lsrs	r2, r1
 8004a4c:	07d6      	lsls	r6, r2, #31
 8004a4e:	d544      	bpl.n	8004ada <__sflush_r+0xf2>
 8004a50:	2200      	movs	r2, #0
 8004a52:	6062      	str	r2, [r4, #4]
 8004a54:	04d9      	lsls	r1, r3, #19
 8004a56:	6922      	ldr	r2, [r4, #16]
 8004a58:	6022      	str	r2, [r4, #0]
 8004a5a:	d504      	bpl.n	8004a66 <__sflush_r+0x7e>
 8004a5c:	1c42      	adds	r2, r0, #1
 8004a5e:	d101      	bne.n	8004a64 <__sflush_r+0x7c>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b903      	cbnz	r3, 8004a66 <__sflush_r+0x7e>
 8004a64:	6560      	str	r0, [r4, #84]	; 0x54
 8004a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a68:	602f      	str	r7, [r5, #0]
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	d0c9      	beq.n	8004a02 <__sflush_r+0x1a>
 8004a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a72:	4299      	cmp	r1, r3
 8004a74:	d002      	beq.n	8004a7c <__sflush_r+0x94>
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f994 	bl	8004da4 <_free_r>
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8004a80:	e7c0      	b.n	8004a04 <__sflush_r+0x1c>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b0      	blx	r6
 8004a88:	1c41      	adds	r1, r0, #1
 8004a8a:	d1c8      	bne.n	8004a1e <__sflush_r+0x36>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0c5      	beq.n	8004a1e <__sflush_r+0x36>
 8004a92:	2b1d      	cmp	r3, #29
 8004a94:	d001      	beq.n	8004a9a <__sflush_r+0xb2>
 8004a96:	2b16      	cmp	r3, #22
 8004a98:	d101      	bne.n	8004a9e <__sflush_r+0xb6>
 8004a9a:	602f      	str	r7, [r5, #0]
 8004a9c:	e7b1      	b.n	8004a02 <__sflush_r+0x1a>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa4:	81a3      	strh	r3, [r4, #12]
 8004aa6:	e7ad      	b.n	8004a04 <__sflush_r+0x1c>
 8004aa8:	690f      	ldr	r7, [r1, #16]
 8004aaa:	2f00      	cmp	r7, #0
 8004aac:	d0a9      	beq.n	8004a02 <__sflush_r+0x1a>
 8004aae:	0793      	lsls	r3, r2, #30
 8004ab0:	680e      	ldr	r6, [r1, #0]
 8004ab2:	bf08      	it	eq
 8004ab4:	694b      	ldreq	r3, [r1, #20]
 8004ab6:	600f      	str	r7, [r1, #0]
 8004ab8:	bf18      	it	ne
 8004aba:	2300      	movne	r3, #0
 8004abc:	eba6 0807 	sub.w	r8, r6, r7
 8004ac0:	608b      	str	r3, [r1, #8]
 8004ac2:	f1b8 0f00 	cmp.w	r8, #0
 8004ac6:	dd9c      	ble.n	8004a02 <__sflush_r+0x1a>
 8004ac8:	4643      	mov	r3, r8
 8004aca:	463a      	mov	r2, r7
 8004acc:	6a21      	ldr	r1, [r4, #32]
 8004ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b0      	blx	r6
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	dc06      	bgt.n	8004ae6 <__sflush_r+0xfe>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	e78e      	b.n	8004a04 <__sflush_r+0x1c>
 8004ae6:	4407      	add	r7, r0
 8004ae8:	eba8 0800 	sub.w	r8, r8, r0
 8004aec:	e7e9      	b.n	8004ac2 <__sflush_r+0xda>
 8004aee:	bf00      	nop
 8004af0:	20400001 	.word	0x20400001

08004af4 <_fflush_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	4605      	mov	r5, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	b1db      	cbz	r3, 8004b36 <_fflush_r+0x42>
 8004afe:	b118      	cbz	r0, 8004b08 <_fflush_r+0x14>
 8004b00:	6983      	ldr	r3, [r0, #24]
 8004b02:	b90b      	cbnz	r3, 8004b08 <_fflush_r+0x14>
 8004b04:	f000 f860 	bl	8004bc8 <__sinit>
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <_fflush_r+0x48>)
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d109      	bne.n	8004b22 <_fflush_r+0x2e>
 8004b0e:	686c      	ldr	r4, [r5, #4]
 8004b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b14:	b17b      	cbz	r3, 8004b36 <_fflush_r+0x42>
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1e:	f7ff bf63 	b.w	80049e8 <__sflush_r>
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <_fflush_r+0x4c>)
 8004b24:	429c      	cmp	r4, r3
 8004b26:	d101      	bne.n	8004b2c <_fflush_r+0x38>
 8004b28:	68ac      	ldr	r4, [r5, #8]
 8004b2a:	e7f1      	b.n	8004b10 <_fflush_r+0x1c>
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <_fflush_r+0x50>)
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	bf08      	it	eq
 8004b32:	68ec      	ldreq	r4, [r5, #12]
 8004b34:	e7ec      	b.n	8004b10 <_fflush_r+0x1c>
 8004b36:	2000      	movs	r0, #0
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	bf00      	nop
 8004b3c:	080058b8 	.word	0x080058b8
 8004b40:	080058d8 	.word	0x080058d8
 8004b44:	08005898 	.word	0x08005898

08004b48 <std>:
 8004b48:	2300      	movs	r3, #0
 8004b4a:	b510      	push	{r4, lr}
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b52:	6083      	str	r3, [r0, #8]
 8004b54:	8181      	strh	r1, [r0, #12]
 8004b56:	6643      	str	r3, [r0, #100]	; 0x64
 8004b58:	81c2      	strh	r2, [r0, #14]
 8004b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b5e:	6183      	str	r3, [r0, #24]
 8004b60:	4619      	mov	r1, r3
 8004b62:	2208      	movs	r2, #8
 8004b64:	305c      	adds	r0, #92	; 0x5c
 8004b66:	f7ff fdfb 	bl	8004760 <memset>
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <std+0x38>)
 8004b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <std+0x3c>)
 8004b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <std+0x40>)
 8004b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <std+0x44>)
 8004b78:	6224      	str	r4, [r4, #32]
 8004b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	080054a5 	.word	0x080054a5
 8004b84:	080054c7 	.word	0x080054c7
 8004b88:	080054ff 	.word	0x080054ff
 8004b8c:	08005523 	.word	0x08005523

08004b90 <_cleanup_r>:
 8004b90:	4901      	ldr	r1, [pc, #4]	; (8004b98 <_cleanup_r+0x8>)
 8004b92:	f000 b885 	b.w	8004ca0 <_fwalk_reent>
 8004b96:	bf00      	nop
 8004b98:	08004af5 	.word	0x08004af5

08004b9c <__sfmoreglue>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	1e4a      	subs	r2, r1, #1
 8004ba0:	2568      	movs	r5, #104	; 0x68
 8004ba2:	4355      	muls	r5, r2
 8004ba4:	460e      	mov	r6, r1
 8004ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004baa:	f000 f949 	bl	8004e40 <_malloc_r>
 8004bae:	4604      	mov	r4, r0
 8004bb0:	b140      	cbz	r0, 8004bc4 <__sfmoreglue+0x28>
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8004bb8:	300c      	adds	r0, #12
 8004bba:	60a0      	str	r0, [r4, #8]
 8004bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bc0:	f7ff fdce 	bl	8004760 <memset>
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}

08004bc8 <__sinit>:
 8004bc8:	6983      	ldr	r3, [r0, #24]
 8004bca:	b510      	push	{r4, lr}
 8004bcc:	4604      	mov	r4, r0
 8004bce:	bb33      	cbnz	r3, 8004c1e <__sinit+0x56>
 8004bd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004bd4:	6503      	str	r3, [r0, #80]	; 0x50
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <__sinit+0x58>)
 8004bd8:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <__sinit+0x5c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6282      	str	r2, [r0, #40]	; 0x28
 8004bde:	4298      	cmp	r0, r3
 8004be0:	bf04      	itt	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	6183      	streq	r3, [r0, #24]
 8004be6:	f000 f81f 	bl	8004c28 <__sfp>
 8004bea:	6060      	str	r0, [r4, #4]
 8004bec:	4620      	mov	r0, r4
 8004bee:	f000 f81b 	bl	8004c28 <__sfp>
 8004bf2:	60a0      	str	r0, [r4, #8]
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f000 f817 	bl	8004c28 <__sfp>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	60e0      	str	r0, [r4, #12]
 8004bfe:	2104      	movs	r1, #4
 8004c00:	6860      	ldr	r0, [r4, #4]
 8004c02:	f7ff ffa1 	bl	8004b48 <std>
 8004c06:	2201      	movs	r2, #1
 8004c08:	2109      	movs	r1, #9
 8004c0a:	68a0      	ldr	r0, [r4, #8]
 8004c0c:	f7ff ff9c 	bl	8004b48 <std>
 8004c10:	2202      	movs	r2, #2
 8004c12:	2112      	movs	r1, #18
 8004c14:	68e0      	ldr	r0, [r4, #12]
 8004c16:	f7ff ff97 	bl	8004b48 <std>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61a3      	str	r3, [r4, #24]
 8004c1e:	bd10      	pop	{r4, pc}
 8004c20:	08005894 	.word	0x08005894
 8004c24:	08004b91 	.word	0x08004b91

08004c28 <__sfp>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <__sfp+0x70>)
 8004c2c:	681e      	ldr	r6, [r3, #0]
 8004c2e:	69b3      	ldr	r3, [r6, #24]
 8004c30:	4607      	mov	r7, r0
 8004c32:	b913      	cbnz	r3, 8004c3a <__sfp+0x12>
 8004c34:	4630      	mov	r0, r6
 8004c36:	f7ff ffc7 	bl	8004bc8 <__sinit>
 8004c3a:	3648      	adds	r6, #72	; 0x48
 8004c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	d503      	bpl.n	8004c4c <__sfp+0x24>
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	b133      	cbz	r3, 8004c56 <__sfp+0x2e>
 8004c48:	6836      	ldr	r6, [r6, #0]
 8004c4a:	e7f7      	b.n	8004c3c <__sfp+0x14>
 8004c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c50:	b16d      	cbz	r5, 8004c6e <__sfp+0x46>
 8004c52:	3468      	adds	r4, #104	; 0x68
 8004c54:	e7f4      	b.n	8004c40 <__sfp+0x18>
 8004c56:	2104      	movs	r1, #4
 8004c58:	4638      	mov	r0, r7
 8004c5a:	f7ff ff9f 	bl	8004b9c <__sfmoreglue>
 8004c5e:	6030      	str	r0, [r6, #0]
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d1f1      	bne.n	8004c48 <__sfp+0x20>
 8004c64:	230c      	movs	r3, #12
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4604      	mov	r4, r0
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <__sfp+0x74>)
 8004c70:	6665      	str	r5, [r4, #100]	; 0x64
 8004c72:	e9c4 5500 	strd	r5, r5, [r4]
 8004c76:	60a5      	str	r5, [r4, #8]
 8004c78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004c7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004c80:	2208      	movs	r2, #8
 8004c82:	4629      	mov	r1, r5
 8004c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c88:	f7ff fd6a 	bl	8004760 <memset>
 8004c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c94:	e7e9      	b.n	8004c6a <__sfp+0x42>
 8004c96:	bf00      	nop
 8004c98:	08005894 	.word	0x08005894
 8004c9c:	ffff0001 	.word	0xffff0001

08004ca0 <_fwalk_reent>:
 8004ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	4689      	mov	r9, r1
 8004ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cac:	2600      	movs	r6, #0
 8004cae:	b914      	cbnz	r4, 8004cb6 <_fwalk_reent+0x16>
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004cba:	3f01      	subs	r7, #1
 8004cbc:	d501      	bpl.n	8004cc2 <_fwalk_reent+0x22>
 8004cbe:	6824      	ldr	r4, [r4, #0]
 8004cc0:	e7f5      	b.n	8004cae <_fwalk_reent+0xe>
 8004cc2:	89ab      	ldrh	r3, [r5, #12]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d907      	bls.n	8004cd8 <_fwalk_reent+0x38>
 8004cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	d003      	beq.n	8004cd8 <_fwalk_reent+0x38>
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	47c8      	blx	r9
 8004cd6:	4306      	orrs	r6, r0
 8004cd8:	3568      	adds	r5, #104	; 0x68
 8004cda:	e7ee      	b.n	8004cba <_fwalk_reent+0x1a>

08004cdc <__swhatbuf_r>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	460e      	mov	r6, r1
 8004ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	b096      	sub	sp, #88	; 0x58
 8004ce8:	4614      	mov	r4, r2
 8004cea:	461d      	mov	r5, r3
 8004cec:	da07      	bge.n	8004cfe <__swhatbuf_r+0x22>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	89b3      	ldrh	r3, [r6, #12]
 8004cf4:	061a      	lsls	r2, r3, #24
 8004cf6:	d410      	bmi.n	8004d1a <__swhatbuf_r+0x3e>
 8004cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cfc:	e00e      	b.n	8004d1c <__swhatbuf_r+0x40>
 8004cfe:	466a      	mov	r2, sp
 8004d00:	f000 fc36 	bl	8005570 <_fstat_r>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	dbf2      	blt.n	8004cee <__swhatbuf_r+0x12>
 8004d08:	9a01      	ldr	r2, [sp, #4]
 8004d0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d12:	425a      	negs	r2, r3
 8004d14:	415a      	adcs	r2, r3
 8004d16:	602a      	str	r2, [r5, #0]
 8004d18:	e7ee      	b.n	8004cf8 <__swhatbuf_r+0x1c>
 8004d1a:	2340      	movs	r3, #64	; 0x40
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	b016      	add	sp, #88	; 0x58
 8004d22:	bd70      	pop	{r4, r5, r6, pc}

08004d24 <__smakebuf_r>:
 8004d24:	898b      	ldrh	r3, [r1, #12]
 8004d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d28:	079d      	lsls	r5, r3, #30
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	d507      	bpl.n	8004d40 <__smakebuf_r+0x1c>
 8004d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	2301      	movs	r3, #1
 8004d3a:	6163      	str	r3, [r4, #20]
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	ab01      	add	r3, sp, #4
 8004d42:	466a      	mov	r2, sp
 8004d44:	f7ff ffca 	bl	8004cdc <__swhatbuf_r>
 8004d48:	9900      	ldr	r1, [sp, #0]
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f000 f877 	bl	8004e40 <_malloc_r>
 8004d52:	b948      	cbnz	r0, 8004d68 <__smakebuf_r+0x44>
 8004d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d58:	059a      	lsls	r2, r3, #22
 8004d5a:	d4ef      	bmi.n	8004d3c <__smakebuf_r+0x18>
 8004d5c:	f023 0303 	bic.w	r3, r3, #3
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	e7e3      	b.n	8004d30 <__smakebuf_r+0xc>
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <__smakebuf_r+0x7c>)
 8004d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	6020      	str	r0, [r4, #0]
 8004d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	9b00      	ldr	r3, [sp, #0]
 8004d78:	6163      	str	r3, [r4, #20]
 8004d7a:	9b01      	ldr	r3, [sp, #4]
 8004d7c:	6120      	str	r0, [r4, #16]
 8004d7e:	b15b      	cbz	r3, 8004d98 <__smakebuf_r+0x74>
 8004d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 fc05 	bl	8005594 <_isatty_r>
 8004d8a:	b128      	cbz	r0, 8004d98 <__smakebuf_r+0x74>
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	81a3      	strh	r3, [r4, #12]
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	431d      	orrs	r5, r3
 8004d9c:	81a5      	strh	r5, [r4, #12]
 8004d9e:	e7cd      	b.n	8004d3c <__smakebuf_r+0x18>
 8004da0:	08004b91 	.word	0x08004b91

08004da4 <_free_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4605      	mov	r5, r0
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d045      	beq.n	8004e38 <_free_r+0x94>
 8004dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db0:	1f0c      	subs	r4, r1, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfb8      	it	lt
 8004db6:	18e4      	addlt	r4, r4, r3
 8004db8:	f000 fc0e 	bl	80055d8 <__malloc_lock>
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <_free_r+0x98>)
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	b933      	cbnz	r3, 8004dd2 <_free_r+0x2e>
 8004dc4:	6063      	str	r3, [r4, #4]
 8004dc6:	6014      	str	r4, [r2, #0]
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dce:	f000 bc04 	b.w	80055da <__malloc_unlock>
 8004dd2:	42a3      	cmp	r3, r4
 8004dd4:	d90c      	bls.n	8004df0 <_free_r+0x4c>
 8004dd6:	6821      	ldr	r1, [r4, #0]
 8004dd8:	1862      	adds	r2, r4, r1
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	bf04      	itt	eq
 8004dde:	681a      	ldreq	r2, [r3, #0]
 8004de0:	685b      	ldreq	r3, [r3, #4]
 8004de2:	6063      	str	r3, [r4, #4]
 8004de4:	bf04      	itt	eq
 8004de6:	1852      	addeq	r2, r2, r1
 8004de8:	6022      	streq	r2, [r4, #0]
 8004dea:	6004      	str	r4, [r0, #0]
 8004dec:	e7ec      	b.n	8004dc8 <_free_r+0x24>
 8004dee:	4613      	mov	r3, r2
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	b10a      	cbz	r2, 8004df8 <_free_r+0x54>
 8004df4:	42a2      	cmp	r2, r4
 8004df6:	d9fa      	bls.n	8004dee <_free_r+0x4a>
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	1858      	adds	r0, r3, r1
 8004dfc:	42a0      	cmp	r0, r4
 8004dfe:	d10b      	bne.n	8004e18 <_free_r+0x74>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	4401      	add	r1, r0
 8004e04:	1858      	adds	r0, r3, r1
 8004e06:	4282      	cmp	r2, r0
 8004e08:	6019      	str	r1, [r3, #0]
 8004e0a:	d1dd      	bne.n	8004dc8 <_free_r+0x24>
 8004e0c:	6810      	ldr	r0, [r2, #0]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	4401      	add	r1, r0
 8004e14:	6019      	str	r1, [r3, #0]
 8004e16:	e7d7      	b.n	8004dc8 <_free_r+0x24>
 8004e18:	d902      	bls.n	8004e20 <_free_r+0x7c>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	e7d3      	b.n	8004dc8 <_free_r+0x24>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	1821      	adds	r1, r4, r0
 8004e24:	428a      	cmp	r2, r1
 8004e26:	bf04      	itt	eq
 8004e28:	6811      	ldreq	r1, [r2, #0]
 8004e2a:	6852      	ldreq	r2, [r2, #4]
 8004e2c:	6062      	str	r2, [r4, #4]
 8004e2e:	bf04      	itt	eq
 8004e30:	1809      	addeq	r1, r1, r0
 8004e32:	6021      	streq	r1, [r4, #0]
 8004e34:	605c      	str	r4, [r3, #4]
 8004e36:	e7c7      	b.n	8004dc8 <_free_r+0x24>
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200000a0 	.word	0x200000a0

08004e40 <_malloc_r>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	1ccd      	adds	r5, r1, #3
 8004e44:	f025 0503 	bic.w	r5, r5, #3
 8004e48:	3508      	adds	r5, #8
 8004e4a:	2d0c      	cmp	r5, #12
 8004e4c:	bf38      	it	cc
 8004e4e:	250c      	movcc	r5, #12
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	4606      	mov	r6, r0
 8004e54:	db01      	blt.n	8004e5a <_malloc_r+0x1a>
 8004e56:	42a9      	cmp	r1, r5
 8004e58:	d903      	bls.n	8004e62 <_malloc_r+0x22>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	6033      	str	r3, [r6, #0]
 8004e5e:	2000      	movs	r0, #0
 8004e60:	bd70      	pop	{r4, r5, r6, pc}
 8004e62:	f000 fbb9 	bl	80055d8 <__malloc_lock>
 8004e66:	4a21      	ldr	r2, [pc, #132]	; (8004eec <_malloc_r+0xac>)
 8004e68:	6814      	ldr	r4, [r2, #0]
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	b991      	cbnz	r1, 8004e94 <_malloc_r+0x54>
 8004e6e:	4c20      	ldr	r4, [pc, #128]	; (8004ef0 <_malloc_r+0xb0>)
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	b91b      	cbnz	r3, 8004e7c <_malloc_r+0x3c>
 8004e74:	4630      	mov	r0, r6
 8004e76:	f000 fb05 	bl	8005484 <_sbrk_r>
 8004e7a:	6020      	str	r0, [r4, #0]
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f000 fb00 	bl	8005484 <_sbrk_r>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d124      	bne.n	8004ed2 <_malloc_r+0x92>
 8004e88:	230c      	movs	r3, #12
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f000 fba4 	bl	80055da <__malloc_unlock>
 8004e92:	e7e4      	b.n	8004e5e <_malloc_r+0x1e>
 8004e94:	680b      	ldr	r3, [r1, #0]
 8004e96:	1b5b      	subs	r3, r3, r5
 8004e98:	d418      	bmi.n	8004ecc <_malloc_r+0x8c>
 8004e9a:	2b0b      	cmp	r3, #11
 8004e9c:	d90f      	bls.n	8004ebe <_malloc_r+0x7e>
 8004e9e:	600b      	str	r3, [r1, #0]
 8004ea0:	50cd      	str	r5, [r1, r3]
 8004ea2:	18cc      	adds	r4, r1, r3
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 fb98 	bl	80055da <__malloc_unlock>
 8004eaa:	f104 000b 	add.w	r0, r4, #11
 8004eae:	1d23      	adds	r3, r4, #4
 8004eb0:	f020 0007 	bic.w	r0, r0, #7
 8004eb4:	1ac3      	subs	r3, r0, r3
 8004eb6:	d0d3      	beq.n	8004e60 <_malloc_r+0x20>
 8004eb8:	425a      	negs	r2, r3
 8004eba:	50e2      	str	r2, [r4, r3]
 8004ebc:	e7d0      	b.n	8004e60 <_malloc_r+0x20>
 8004ebe:	428c      	cmp	r4, r1
 8004ec0:	684b      	ldr	r3, [r1, #4]
 8004ec2:	bf16      	itet	ne
 8004ec4:	6063      	strne	r3, [r4, #4]
 8004ec6:	6013      	streq	r3, [r2, #0]
 8004ec8:	460c      	movne	r4, r1
 8004eca:	e7eb      	b.n	8004ea4 <_malloc_r+0x64>
 8004ecc:	460c      	mov	r4, r1
 8004ece:	6849      	ldr	r1, [r1, #4]
 8004ed0:	e7cc      	b.n	8004e6c <_malloc_r+0x2c>
 8004ed2:	1cc4      	adds	r4, r0, #3
 8004ed4:	f024 0403 	bic.w	r4, r4, #3
 8004ed8:	42a0      	cmp	r0, r4
 8004eda:	d005      	beq.n	8004ee8 <_malloc_r+0xa8>
 8004edc:	1a21      	subs	r1, r4, r0
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f000 fad0 	bl	8005484 <_sbrk_r>
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d0cf      	beq.n	8004e88 <_malloc_r+0x48>
 8004ee8:	6025      	str	r5, [r4, #0]
 8004eea:	e7db      	b.n	8004ea4 <_malloc_r+0x64>
 8004eec:	200000a0 	.word	0x200000a0
 8004ef0:	200000a4 	.word	0x200000a4

08004ef4 <__sfputc_r>:
 8004ef4:	6893      	ldr	r3, [r2, #8]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	b410      	push	{r4}
 8004efc:	6093      	str	r3, [r2, #8]
 8004efe:	da08      	bge.n	8004f12 <__sfputc_r+0x1e>
 8004f00:	6994      	ldr	r4, [r2, #24]
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	db01      	blt.n	8004f0a <__sfputc_r+0x16>
 8004f06:	290a      	cmp	r1, #10
 8004f08:	d103      	bne.n	8004f12 <__sfputc_r+0x1e>
 8004f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f0e:	f7ff bcab 	b.w	8004868 <__swbuf_r>
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	1c58      	adds	r0, r3, #1
 8004f16:	6010      	str	r0, [r2, #0]
 8004f18:	7019      	strb	r1, [r3, #0]
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <__sfputs_r>:
 8004f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f24:	4606      	mov	r6, r0
 8004f26:	460f      	mov	r7, r1
 8004f28:	4614      	mov	r4, r2
 8004f2a:	18d5      	adds	r5, r2, r3
 8004f2c:	42ac      	cmp	r4, r5
 8004f2e:	d101      	bne.n	8004f34 <__sfputs_r+0x12>
 8004f30:	2000      	movs	r0, #0
 8004f32:	e007      	b.n	8004f44 <__sfputs_r+0x22>
 8004f34:	463a      	mov	r2, r7
 8004f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	f7ff ffda 	bl	8004ef4 <__sfputc_r>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d1f3      	bne.n	8004f2c <__sfputs_r+0xa>
 8004f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f48 <_vfiprintf_r>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	b09d      	sub	sp, #116	; 0x74
 8004f50:	4617      	mov	r7, r2
 8004f52:	461d      	mov	r5, r3
 8004f54:	4606      	mov	r6, r0
 8004f56:	b118      	cbz	r0, 8004f60 <_vfiprintf_r+0x18>
 8004f58:	6983      	ldr	r3, [r0, #24]
 8004f5a:	b90b      	cbnz	r3, 8004f60 <_vfiprintf_r+0x18>
 8004f5c:	f7ff fe34 	bl	8004bc8 <__sinit>
 8004f60:	4b7c      	ldr	r3, [pc, #496]	; (8005154 <_vfiprintf_r+0x20c>)
 8004f62:	429c      	cmp	r4, r3
 8004f64:	d158      	bne.n	8005018 <_vfiprintf_r+0xd0>
 8004f66:	6874      	ldr	r4, [r6, #4]
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	0718      	lsls	r0, r3, #28
 8004f6c:	d55e      	bpl.n	800502c <_vfiprintf_r+0xe4>
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05b      	beq.n	800502c <_vfiprintf_r+0xe4>
 8004f74:	2300      	movs	r3, #0
 8004f76:	9309      	str	r3, [sp, #36]	; 0x24
 8004f78:	2320      	movs	r3, #32
 8004f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f7e:	2330      	movs	r3, #48	; 0x30
 8004f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f84:	9503      	str	r5, [sp, #12]
 8004f86:	f04f 0b01 	mov.w	fp, #1
 8004f8a:	46b8      	mov	r8, r7
 8004f8c:	4645      	mov	r5, r8
 8004f8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f92:	b10b      	cbz	r3, 8004f98 <_vfiprintf_r+0x50>
 8004f94:	2b25      	cmp	r3, #37	; 0x25
 8004f96:	d154      	bne.n	8005042 <_vfiprintf_r+0xfa>
 8004f98:	ebb8 0a07 	subs.w	sl, r8, r7
 8004f9c:	d00b      	beq.n	8004fb6 <_vfiprintf_r+0x6e>
 8004f9e:	4653      	mov	r3, sl
 8004fa0:	463a      	mov	r2, r7
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f7ff ffbc 	bl	8004f22 <__sfputs_r>
 8004faa:	3001      	adds	r0, #1
 8004fac:	f000 80c2 	beq.w	8005134 <_vfiprintf_r+0x1ec>
 8004fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb2:	4453      	add	r3, sl
 8004fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb6:	f898 3000 	ldrb.w	r3, [r8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80ba 	beq.w	8005134 <_vfiprintf_r+0x1ec>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fca:	9304      	str	r3, [sp, #16]
 8004fcc:	9307      	str	r3, [sp, #28]
 8004fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8004fd4:	46a8      	mov	r8, r5
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004fdc:	485e      	ldr	r0, [pc, #376]	; (8005158 <_vfiprintf_r+0x210>)
 8004fde:	f7fb f8f7 	bl	80001d0 <memchr>
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	bb78      	cbnz	r0, 8005046 <_vfiprintf_r+0xfe>
 8004fe6:	06d9      	lsls	r1, r3, #27
 8004fe8:	bf44      	itt	mi
 8004fea:	2220      	movmi	r2, #32
 8004fec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ff0:	071a      	lsls	r2, r3, #28
 8004ff2:	bf44      	itt	mi
 8004ff4:	222b      	movmi	r2, #43	; 0x2b
 8004ff6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ffa:	782a      	ldrb	r2, [r5, #0]
 8004ffc:	2a2a      	cmp	r2, #42	; 0x2a
 8004ffe:	d02a      	beq.n	8005056 <_vfiprintf_r+0x10e>
 8005000:	9a07      	ldr	r2, [sp, #28]
 8005002:	46a8      	mov	r8, r5
 8005004:	2000      	movs	r0, #0
 8005006:	250a      	movs	r5, #10
 8005008:	4641      	mov	r1, r8
 800500a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800500e:	3b30      	subs	r3, #48	; 0x30
 8005010:	2b09      	cmp	r3, #9
 8005012:	d969      	bls.n	80050e8 <_vfiprintf_r+0x1a0>
 8005014:	b360      	cbz	r0, 8005070 <_vfiprintf_r+0x128>
 8005016:	e024      	b.n	8005062 <_vfiprintf_r+0x11a>
 8005018:	4b50      	ldr	r3, [pc, #320]	; (800515c <_vfiprintf_r+0x214>)
 800501a:	429c      	cmp	r4, r3
 800501c:	d101      	bne.n	8005022 <_vfiprintf_r+0xda>
 800501e:	68b4      	ldr	r4, [r6, #8]
 8005020:	e7a2      	b.n	8004f68 <_vfiprintf_r+0x20>
 8005022:	4b4f      	ldr	r3, [pc, #316]	; (8005160 <_vfiprintf_r+0x218>)
 8005024:	429c      	cmp	r4, r3
 8005026:	bf08      	it	eq
 8005028:	68f4      	ldreq	r4, [r6, #12]
 800502a:	e79d      	b.n	8004f68 <_vfiprintf_r+0x20>
 800502c:	4621      	mov	r1, r4
 800502e:	4630      	mov	r0, r6
 8005030:	f7ff fc6c 	bl	800490c <__swsetup_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	d09d      	beq.n	8004f74 <_vfiprintf_r+0x2c>
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	b01d      	add	sp, #116	; 0x74
 800503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005042:	46a8      	mov	r8, r5
 8005044:	e7a2      	b.n	8004f8c <_vfiprintf_r+0x44>
 8005046:	4a44      	ldr	r2, [pc, #272]	; (8005158 <_vfiprintf_r+0x210>)
 8005048:	1a80      	subs	r0, r0, r2
 800504a:	fa0b f000 	lsl.w	r0, fp, r0
 800504e:	4318      	orrs	r0, r3
 8005050:	9004      	str	r0, [sp, #16]
 8005052:	4645      	mov	r5, r8
 8005054:	e7be      	b.n	8004fd4 <_vfiprintf_r+0x8c>
 8005056:	9a03      	ldr	r2, [sp, #12]
 8005058:	1d11      	adds	r1, r2, #4
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	9103      	str	r1, [sp, #12]
 800505e:	2a00      	cmp	r2, #0
 8005060:	db01      	blt.n	8005066 <_vfiprintf_r+0x11e>
 8005062:	9207      	str	r2, [sp, #28]
 8005064:	e004      	b.n	8005070 <_vfiprintf_r+0x128>
 8005066:	4252      	negs	r2, r2
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	9207      	str	r2, [sp, #28]
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	f898 3000 	ldrb.w	r3, [r8]
 8005074:	2b2e      	cmp	r3, #46	; 0x2e
 8005076:	d10e      	bne.n	8005096 <_vfiprintf_r+0x14e>
 8005078:	f898 3001 	ldrb.w	r3, [r8, #1]
 800507c:	2b2a      	cmp	r3, #42	; 0x2a
 800507e:	d138      	bne.n	80050f2 <_vfiprintf_r+0x1aa>
 8005080:	9b03      	ldr	r3, [sp, #12]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	9203      	str	r2, [sp, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	bfb8      	it	lt
 800508c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005090:	f108 0802 	add.w	r8, r8, #2
 8005094:	9305      	str	r3, [sp, #20]
 8005096:	4d33      	ldr	r5, [pc, #204]	; (8005164 <_vfiprintf_r+0x21c>)
 8005098:	f898 1000 	ldrb.w	r1, [r8]
 800509c:	2203      	movs	r2, #3
 800509e:	4628      	mov	r0, r5
 80050a0:	f7fb f896 	bl	80001d0 <memchr>
 80050a4:	b140      	cbz	r0, 80050b8 <_vfiprintf_r+0x170>
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	1b40      	subs	r0, r0, r5
 80050aa:	fa03 f000 	lsl.w	r0, r3, r0
 80050ae:	9b04      	ldr	r3, [sp, #16]
 80050b0:	4303      	orrs	r3, r0
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	f898 1000 	ldrb.w	r1, [r8]
 80050bc:	482a      	ldr	r0, [pc, #168]	; (8005168 <_vfiprintf_r+0x220>)
 80050be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050c2:	2206      	movs	r2, #6
 80050c4:	f108 0701 	add.w	r7, r8, #1
 80050c8:	f7fb f882 	bl	80001d0 <memchr>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d037      	beq.n	8005140 <_vfiprintf_r+0x1f8>
 80050d0:	4b26      	ldr	r3, [pc, #152]	; (800516c <_vfiprintf_r+0x224>)
 80050d2:	bb1b      	cbnz	r3, 800511c <_vfiprintf_r+0x1d4>
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	3307      	adds	r3, #7
 80050d8:	f023 0307 	bic.w	r3, r3, #7
 80050dc:	3308      	adds	r3, #8
 80050de:	9303      	str	r3, [sp, #12]
 80050e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e2:	444b      	add	r3, r9
 80050e4:	9309      	str	r3, [sp, #36]	; 0x24
 80050e6:	e750      	b.n	8004f8a <_vfiprintf_r+0x42>
 80050e8:	fb05 3202 	mla	r2, r5, r2, r3
 80050ec:	2001      	movs	r0, #1
 80050ee:	4688      	mov	r8, r1
 80050f0:	e78a      	b.n	8005008 <_vfiprintf_r+0xc0>
 80050f2:	2300      	movs	r3, #0
 80050f4:	f108 0801 	add.w	r8, r8, #1
 80050f8:	9305      	str	r3, [sp, #20]
 80050fa:	4619      	mov	r1, r3
 80050fc:	250a      	movs	r5, #10
 80050fe:	4640      	mov	r0, r8
 8005100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005104:	3a30      	subs	r2, #48	; 0x30
 8005106:	2a09      	cmp	r2, #9
 8005108:	d903      	bls.n	8005112 <_vfiprintf_r+0x1ca>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0c3      	beq.n	8005096 <_vfiprintf_r+0x14e>
 800510e:	9105      	str	r1, [sp, #20]
 8005110:	e7c1      	b.n	8005096 <_vfiprintf_r+0x14e>
 8005112:	fb05 2101 	mla	r1, r5, r1, r2
 8005116:	2301      	movs	r3, #1
 8005118:	4680      	mov	r8, r0
 800511a:	e7f0      	b.n	80050fe <_vfiprintf_r+0x1b6>
 800511c:	ab03      	add	r3, sp, #12
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	4622      	mov	r2, r4
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <_vfiprintf_r+0x228>)
 8005124:	a904      	add	r1, sp, #16
 8005126:	4630      	mov	r0, r6
 8005128:	f3af 8000 	nop.w
 800512c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005130:	4681      	mov	r9, r0
 8005132:	d1d5      	bne.n	80050e0 <_vfiprintf_r+0x198>
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	065b      	lsls	r3, r3, #25
 8005138:	f53f af7e 	bmi.w	8005038 <_vfiprintf_r+0xf0>
 800513c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800513e:	e77d      	b.n	800503c <_vfiprintf_r+0xf4>
 8005140:	ab03      	add	r3, sp, #12
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	4622      	mov	r2, r4
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <_vfiprintf_r+0x228>)
 8005148:	a904      	add	r1, sp, #16
 800514a:	4630      	mov	r0, r6
 800514c:	f000 f888 	bl	8005260 <_printf_i>
 8005150:	e7ec      	b.n	800512c <_vfiprintf_r+0x1e4>
 8005152:	bf00      	nop
 8005154:	080058b8 	.word	0x080058b8
 8005158:	080058f8 	.word	0x080058f8
 800515c:	080058d8 	.word	0x080058d8
 8005160:	08005898 	.word	0x08005898
 8005164:	080058fe 	.word	0x080058fe
 8005168:	08005902 	.word	0x08005902
 800516c:	00000000 	.word	0x00000000
 8005170:	08004f23 	.word	0x08004f23

08005174 <_printf_common>:
 8005174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	4691      	mov	r9, r2
 800517a:	461f      	mov	r7, r3
 800517c:	688a      	ldr	r2, [r1, #8]
 800517e:	690b      	ldr	r3, [r1, #16]
 8005180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005184:	4293      	cmp	r3, r2
 8005186:	bfb8      	it	lt
 8005188:	4613      	movlt	r3, r2
 800518a:	f8c9 3000 	str.w	r3, [r9]
 800518e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005192:	4606      	mov	r6, r0
 8005194:	460c      	mov	r4, r1
 8005196:	b112      	cbz	r2, 800519e <_printf_common+0x2a>
 8005198:	3301      	adds	r3, #1
 800519a:	f8c9 3000 	str.w	r3, [r9]
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	0699      	lsls	r1, r3, #26
 80051a2:	bf42      	ittt	mi
 80051a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051a8:	3302      	addmi	r3, #2
 80051aa:	f8c9 3000 	strmi.w	r3, [r9]
 80051ae:	6825      	ldr	r5, [r4, #0]
 80051b0:	f015 0506 	ands.w	r5, r5, #6
 80051b4:	d107      	bne.n	80051c6 <_printf_common+0x52>
 80051b6:	f104 0a19 	add.w	sl, r4, #25
 80051ba:	68e3      	ldr	r3, [r4, #12]
 80051bc:	f8d9 2000 	ldr.w	r2, [r9]
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	42ab      	cmp	r3, r5
 80051c4:	dc28      	bgt.n	8005218 <_printf_common+0xa4>
 80051c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	3300      	adds	r3, #0
 80051ce:	bf18      	it	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	0692      	lsls	r2, r2, #26
 80051d4:	d42d      	bmi.n	8005232 <_printf_common+0xbe>
 80051d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051da:	4639      	mov	r1, r7
 80051dc:	4630      	mov	r0, r6
 80051de:	47c0      	blx	r8
 80051e0:	3001      	adds	r0, #1
 80051e2:	d020      	beq.n	8005226 <_printf_common+0xb2>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	68e5      	ldr	r5, [r4, #12]
 80051e8:	f8d9 2000 	ldr.w	r2, [r9]
 80051ec:	f003 0306 	and.w	r3, r3, #6
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	bf08      	it	eq
 80051f4:	1aad      	subeq	r5, r5, r2
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	6922      	ldr	r2, [r4, #16]
 80051fa:	bf0c      	ite	eq
 80051fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005200:	2500      	movne	r5, #0
 8005202:	4293      	cmp	r3, r2
 8005204:	bfc4      	itt	gt
 8005206:	1a9b      	subgt	r3, r3, r2
 8005208:	18ed      	addgt	r5, r5, r3
 800520a:	f04f 0900 	mov.w	r9, #0
 800520e:	341a      	adds	r4, #26
 8005210:	454d      	cmp	r5, r9
 8005212:	d11a      	bne.n	800524a <_printf_common+0xd6>
 8005214:	2000      	movs	r0, #0
 8005216:	e008      	b.n	800522a <_printf_common+0xb6>
 8005218:	2301      	movs	r3, #1
 800521a:	4652      	mov	r2, sl
 800521c:	4639      	mov	r1, r7
 800521e:	4630      	mov	r0, r6
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d103      	bne.n	800522e <_printf_common+0xba>
 8005226:	f04f 30ff 	mov.w	r0, #4294967295
 800522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522e:	3501      	adds	r5, #1
 8005230:	e7c3      	b.n	80051ba <_printf_common+0x46>
 8005232:	18e1      	adds	r1, r4, r3
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	2030      	movs	r0, #48	; 0x30
 8005238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800523c:	4422      	add	r2, r4
 800523e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005242:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005246:	3302      	adds	r3, #2
 8005248:	e7c5      	b.n	80051d6 <_printf_common+0x62>
 800524a:	2301      	movs	r3, #1
 800524c:	4622      	mov	r2, r4
 800524e:	4639      	mov	r1, r7
 8005250:	4630      	mov	r0, r6
 8005252:	47c0      	blx	r8
 8005254:	3001      	adds	r0, #1
 8005256:	d0e6      	beq.n	8005226 <_printf_common+0xb2>
 8005258:	f109 0901 	add.w	r9, r9, #1
 800525c:	e7d8      	b.n	8005210 <_printf_common+0x9c>
	...

08005260 <_printf_i>:
 8005260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005264:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005268:	460c      	mov	r4, r1
 800526a:	7e09      	ldrb	r1, [r1, #24]
 800526c:	b085      	sub	sp, #20
 800526e:	296e      	cmp	r1, #110	; 0x6e
 8005270:	4617      	mov	r7, r2
 8005272:	4606      	mov	r6, r0
 8005274:	4698      	mov	r8, r3
 8005276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005278:	f000 80b3 	beq.w	80053e2 <_printf_i+0x182>
 800527c:	d822      	bhi.n	80052c4 <_printf_i+0x64>
 800527e:	2963      	cmp	r1, #99	; 0x63
 8005280:	d036      	beq.n	80052f0 <_printf_i+0x90>
 8005282:	d80a      	bhi.n	800529a <_printf_i+0x3a>
 8005284:	2900      	cmp	r1, #0
 8005286:	f000 80b9 	beq.w	80053fc <_printf_i+0x19c>
 800528a:	2958      	cmp	r1, #88	; 0x58
 800528c:	f000 8083 	beq.w	8005396 <_printf_i+0x136>
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005298:	e032      	b.n	8005300 <_printf_i+0xa0>
 800529a:	2964      	cmp	r1, #100	; 0x64
 800529c:	d001      	beq.n	80052a2 <_printf_i+0x42>
 800529e:	2969      	cmp	r1, #105	; 0x69
 80052a0:	d1f6      	bne.n	8005290 <_printf_i+0x30>
 80052a2:	6820      	ldr	r0, [r4, #0]
 80052a4:	6813      	ldr	r3, [r2, #0]
 80052a6:	0605      	lsls	r5, r0, #24
 80052a8:	f103 0104 	add.w	r1, r3, #4
 80052ac:	d52a      	bpl.n	8005304 <_printf_i+0xa4>
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da03      	bge.n	80052be <_printf_i+0x5e>
 80052b6:	222d      	movs	r2, #45	; 0x2d
 80052b8:	425b      	negs	r3, r3
 80052ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80052be:	486f      	ldr	r0, [pc, #444]	; (800547c <_printf_i+0x21c>)
 80052c0:	220a      	movs	r2, #10
 80052c2:	e039      	b.n	8005338 <_printf_i+0xd8>
 80052c4:	2973      	cmp	r1, #115	; 0x73
 80052c6:	f000 809d 	beq.w	8005404 <_printf_i+0x1a4>
 80052ca:	d808      	bhi.n	80052de <_printf_i+0x7e>
 80052cc:	296f      	cmp	r1, #111	; 0x6f
 80052ce:	d020      	beq.n	8005312 <_printf_i+0xb2>
 80052d0:	2970      	cmp	r1, #112	; 0x70
 80052d2:	d1dd      	bne.n	8005290 <_printf_i+0x30>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f043 0320 	orr.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	e003      	b.n	80052e6 <_printf_i+0x86>
 80052de:	2975      	cmp	r1, #117	; 0x75
 80052e0:	d017      	beq.n	8005312 <_printf_i+0xb2>
 80052e2:	2978      	cmp	r1, #120	; 0x78
 80052e4:	d1d4      	bne.n	8005290 <_printf_i+0x30>
 80052e6:	2378      	movs	r3, #120	; 0x78
 80052e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ec:	4864      	ldr	r0, [pc, #400]	; (8005480 <_printf_i+0x220>)
 80052ee:	e055      	b.n	800539c <_printf_i+0x13c>
 80052f0:	6813      	ldr	r3, [r2, #0]
 80052f2:	1d19      	adds	r1, r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6011      	str	r1, [r2, #0]
 80052f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005300:	2301      	movs	r3, #1
 8005302:	e08c      	b.n	800541e <_printf_i+0x1be>
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6011      	str	r1, [r2, #0]
 8005308:	f010 0f40 	tst.w	r0, #64	; 0x40
 800530c:	bf18      	it	ne
 800530e:	b21b      	sxthne	r3, r3
 8005310:	e7cf      	b.n	80052b2 <_printf_i+0x52>
 8005312:	6813      	ldr	r3, [r2, #0]
 8005314:	6825      	ldr	r5, [r4, #0]
 8005316:	1d18      	adds	r0, r3, #4
 8005318:	6010      	str	r0, [r2, #0]
 800531a:	0628      	lsls	r0, r5, #24
 800531c:	d501      	bpl.n	8005322 <_printf_i+0xc2>
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	e002      	b.n	8005328 <_printf_i+0xc8>
 8005322:	0668      	lsls	r0, r5, #25
 8005324:	d5fb      	bpl.n	800531e <_printf_i+0xbe>
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	4854      	ldr	r0, [pc, #336]	; (800547c <_printf_i+0x21c>)
 800532a:	296f      	cmp	r1, #111	; 0x6f
 800532c:	bf14      	ite	ne
 800532e:	220a      	movne	r2, #10
 8005330:	2208      	moveq	r2, #8
 8005332:	2100      	movs	r1, #0
 8005334:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005338:	6865      	ldr	r5, [r4, #4]
 800533a:	60a5      	str	r5, [r4, #8]
 800533c:	2d00      	cmp	r5, #0
 800533e:	f2c0 8095 	blt.w	800546c <_printf_i+0x20c>
 8005342:	6821      	ldr	r1, [r4, #0]
 8005344:	f021 0104 	bic.w	r1, r1, #4
 8005348:	6021      	str	r1, [r4, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d13d      	bne.n	80053ca <_printf_i+0x16a>
 800534e:	2d00      	cmp	r5, #0
 8005350:	f040 808e 	bne.w	8005470 <_printf_i+0x210>
 8005354:	4665      	mov	r5, ip
 8005356:	2a08      	cmp	r2, #8
 8005358:	d10b      	bne.n	8005372 <_printf_i+0x112>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	07db      	lsls	r3, r3, #31
 800535e:	d508      	bpl.n	8005372 <_printf_i+0x112>
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	6862      	ldr	r2, [r4, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	bfde      	ittt	le
 8005368:	2330      	movle	r3, #48	; 0x30
 800536a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800536e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005372:	ebac 0305 	sub.w	r3, ip, r5
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	f8cd 8000 	str.w	r8, [sp]
 800537c:	463b      	mov	r3, r7
 800537e:	aa03      	add	r2, sp, #12
 8005380:	4621      	mov	r1, r4
 8005382:	4630      	mov	r0, r6
 8005384:	f7ff fef6 	bl	8005174 <_printf_common>
 8005388:	3001      	adds	r0, #1
 800538a:	d14d      	bne.n	8005428 <_printf_i+0x1c8>
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	b005      	add	sp, #20
 8005392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005396:	4839      	ldr	r0, [pc, #228]	; (800547c <_printf_i+0x21c>)
 8005398:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	6821      	ldr	r1, [r4, #0]
 80053a0:	1d1d      	adds	r5, r3, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6015      	str	r5, [r2, #0]
 80053a6:	060a      	lsls	r2, r1, #24
 80053a8:	d50b      	bpl.n	80053c2 <_printf_i+0x162>
 80053aa:	07ca      	lsls	r2, r1, #31
 80053ac:	bf44      	itt	mi
 80053ae:	f041 0120 	orrmi.w	r1, r1, #32
 80053b2:	6021      	strmi	r1, [r4, #0]
 80053b4:	b91b      	cbnz	r3, 80053be <_printf_i+0x15e>
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	f022 0220 	bic.w	r2, r2, #32
 80053bc:	6022      	str	r2, [r4, #0]
 80053be:	2210      	movs	r2, #16
 80053c0:	e7b7      	b.n	8005332 <_printf_i+0xd2>
 80053c2:	064d      	lsls	r5, r1, #25
 80053c4:	bf48      	it	mi
 80053c6:	b29b      	uxthmi	r3, r3
 80053c8:	e7ef      	b.n	80053aa <_printf_i+0x14a>
 80053ca:	4665      	mov	r5, ip
 80053cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80053d0:	fb02 3311 	mls	r3, r2, r1, r3
 80053d4:	5cc3      	ldrb	r3, [r0, r3]
 80053d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053da:	460b      	mov	r3, r1
 80053dc:	2900      	cmp	r1, #0
 80053de:	d1f5      	bne.n	80053cc <_printf_i+0x16c>
 80053e0:	e7b9      	b.n	8005356 <_printf_i+0xf6>
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	6825      	ldr	r5, [r4, #0]
 80053e6:	6961      	ldr	r1, [r4, #20]
 80053e8:	1d18      	adds	r0, r3, #4
 80053ea:	6010      	str	r0, [r2, #0]
 80053ec:	0628      	lsls	r0, r5, #24
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	d501      	bpl.n	80053f6 <_printf_i+0x196>
 80053f2:	6019      	str	r1, [r3, #0]
 80053f4:	e002      	b.n	80053fc <_printf_i+0x19c>
 80053f6:	066a      	lsls	r2, r5, #25
 80053f8:	d5fb      	bpl.n	80053f2 <_printf_i+0x192>
 80053fa:	8019      	strh	r1, [r3, #0]
 80053fc:	2300      	movs	r3, #0
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	4665      	mov	r5, ip
 8005402:	e7b9      	b.n	8005378 <_printf_i+0x118>
 8005404:	6813      	ldr	r3, [r2, #0]
 8005406:	1d19      	adds	r1, r3, #4
 8005408:	6011      	str	r1, [r2, #0]
 800540a:	681d      	ldr	r5, [r3, #0]
 800540c:	6862      	ldr	r2, [r4, #4]
 800540e:	2100      	movs	r1, #0
 8005410:	4628      	mov	r0, r5
 8005412:	f7fa fedd 	bl	80001d0 <memchr>
 8005416:	b108      	cbz	r0, 800541c <_printf_i+0x1bc>
 8005418:	1b40      	subs	r0, r0, r5
 800541a:	6060      	str	r0, [r4, #4]
 800541c:	6863      	ldr	r3, [r4, #4]
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	2300      	movs	r3, #0
 8005422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005426:	e7a7      	b.n	8005378 <_printf_i+0x118>
 8005428:	6923      	ldr	r3, [r4, #16]
 800542a:	462a      	mov	r2, r5
 800542c:	4639      	mov	r1, r7
 800542e:	4630      	mov	r0, r6
 8005430:	47c0      	blx	r8
 8005432:	3001      	adds	r0, #1
 8005434:	d0aa      	beq.n	800538c <_printf_i+0x12c>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	079b      	lsls	r3, r3, #30
 800543a:	d413      	bmi.n	8005464 <_printf_i+0x204>
 800543c:	68e0      	ldr	r0, [r4, #12]
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	4298      	cmp	r0, r3
 8005442:	bfb8      	it	lt
 8005444:	4618      	movlt	r0, r3
 8005446:	e7a3      	b.n	8005390 <_printf_i+0x130>
 8005448:	2301      	movs	r3, #1
 800544a:	464a      	mov	r2, r9
 800544c:	4639      	mov	r1, r7
 800544e:	4630      	mov	r0, r6
 8005450:	47c0      	blx	r8
 8005452:	3001      	adds	r0, #1
 8005454:	d09a      	beq.n	800538c <_printf_i+0x12c>
 8005456:	3501      	adds	r5, #1
 8005458:	68e3      	ldr	r3, [r4, #12]
 800545a:	9a03      	ldr	r2, [sp, #12]
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	42ab      	cmp	r3, r5
 8005460:	dcf2      	bgt.n	8005448 <_printf_i+0x1e8>
 8005462:	e7eb      	b.n	800543c <_printf_i+0x1dc>
 8005464:	2500      	movs	r5, #0
 8005466:	f104 0919 	add.w	r9, r4, #25
 800546a:	e7f5      	b.n	8005458 <_printf_i+0x1f8>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ac      	bne.n	80053ca <_printf_i+0x16a>
 8005470:	7803      	ldrb	r3, [r0, #0]
 8005472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005476:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800547a:	e76c      	b.n	8005356 <_printf_i+0xf6>
 800547c:	08005909 	.word	0x08005909
 8005480:	0800591a 	.word	0x0800591a

08005484 <_sbrk_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4c06      	ldr	r4, [pc, #24]	; (80054a0 <_sbrk_r+0x1c>)
 8005488:	2300      	movs	r3, #0
 800548a:	4605      	mov	r5, r0
 800548c:	4608      	mov	r0, r1
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	f7fc f8a8 	bl	80015e4 <_sbrk>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_sbrk_r+0x1a>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	b103      	cbz	r3, 800549e <_sbrk_r+0x1a>
 800549c:	602b      	str	r3, [r5, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	20000184 	.word	0x20000184

080054a4 <__sread>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	460c      	mov	r4, r1
 80054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ac:	f000 f896 	bl	80055dc <_read_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	bfab      	itete	ge
 80054b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054b6:	89a3      	ldrhlt	r3, [r4, #12]
 80054b8:	181b      	addge	r3, r3, r0
 80054ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054be:	bfac      	ite	ge
 80054c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054c2:	81a3      	strhlt	r3, [r4, #12]
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <__swrite>:
 80054c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	461f      	mov	r7, r3
 80054cc:	898b      	ldrh	r3, [r1, #12]
 80054ce:	05db      	lsls	r3, r3, #23
 80054d0:	4605      	mov	r5, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	4616      	mov	r6, r2
 80054d6:	d505      	bpl.n	80054e4 <__swrite+0x1e>
 80054d8:	2302      	movs	r3, #2
 80054da:	2200      	movs	r2, #0
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	f000 f868 	bl	80055b4 <_lseek_r>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	4632      	mov	r2, r6
 80054f2:	463b      	mov	r3, r7
 80054f4:	4628      	mov	r0, r5
 80054f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	f000 b817 	b.w	800552c <_write_r>

080054fe <__sseek>:
 80054fe:	b510      	push	{r4, lr}
 8005500:	460c      	mov	r4, r1
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 f855 	bl	80055b4 <_lseek_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	bf15      	itete	ne
 8005510:	6560      	strne	r0, [r4, #84]	; 0x54
 8005512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800551a:	81a3      	strheq	r3, [r4, #12]
 800551c:	bf18      	it	ne
 800551e:	81a3      	strhne	r3, [r4, #12]
 8005520:	bd10      	pop	{r4, pc}

08005522 <__sclose>:
 8005522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005526:	f000 b813 	b.w	8005550 <_close_r>
	...

0800552c <_write_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4c07      	ldr	r4, [pc, #28]	; (800554c <_write_r+0x20>)
 8005530:	4605      	mov	r5, r0
 8005532:	4608      	mov	r0, r1
 8005534:	4611      	mov	r1, r2
 8005536:	2200      	movs	r2, #0
 8005538:	6022      	str	r2, [r4, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	f7fc f801 	bl	8001542 <_write>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_write_r+0x1e>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	b103      	cbz	r3, 800554a <_write_r+0x1e>
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20000184 	.word	0x20000184

08005550 <_close_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4c06      	ldr	r4, [pc, #24]	; (800556c <_close_r+0x1c>)
 8005554:	2300      	movs	r3, #0
 8005556:	4605      	mov	r5, r0
 8005558:	4608      	mov	r0, r1
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	f7fc f80d 	bl	800157a <_close>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_close_r+0x1a>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	b103      	cbz	r3, 800556a <_close_r+0x1a>
 8005568:	602b      	str	r3, [r5, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	20000184 	.word	0x20000184

08005570 <_fstat_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4c07      	ldr	r4, [pc, #28]	; (8005590 <_fstat_r+0x20>)
 8005574:	2300      	movs	r3, #0
 8005576:	4605      	mov	r5, r0
 8005578:	4608      	mov	r0, r1
 800557a:	4611      	mov	r1, r2
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	f7fc f808 	bl	8001592 <_fstat>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	d102      	bne.n	800558c <_fstat_r+0x1c>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	b103      	cbz	r3, 800558c <_fstat_r+0x1c>
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	bf00      	nop
 8005590:	20000184 	.word	0x20000184

08005594 <_isatty_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4c06      	ldr	r4, [pc, #24]	; (80055b0 <_isatty_r+0x1c>)
 8005598:	2300      	movs	r3, #0
 800559a:	4605      	mov	r5, r0
 800559c:	4608      	mov	r0, r1
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	f7fc f807 	bl	80015b2 <_isatty>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_isatty_r+0x1a>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_isatty_r+0x1a>
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20000184 	.word	0x20000184

080055b4 <_lseek_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4c07      	ldr	r4, [pc, #28]	; (80055d4 <_lseek_r+0x20>)
 80055b8:	4605      	mov	r5, r0
 80055ba:	4608      	mov	r0, r1
 80055bc:	4611      	mov	r1, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	6022      	str	r2, [r4, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7fc f800 	bl	80015c8 <_lseek>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_lseek_r+0x1e>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_lseek_r+0x1e>
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	20000184 	.word	0x20000184

080055d8 <__malloc_lock>:
 80055d8:	4770      	bx	lr

080055da <__malloc_unlock>:
 80055da:	4770      	bx	lr

080055dc <_read_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4c07      	ldr	r4, [pc, #28]	; (80055fc <_read_r+0x20>)
 80055e0:	4605      	mov	r5, r0
 80055e2:	4608      	mov	r0, r1
 80055e4:	4611      	mov	r1, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	6022      	str	r2, [r4, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb ff8c 	bl	8001508 <_read>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_read_r+0x1e>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_read_r+0x1e>
 80055f8:	602b      	str	r3, [r5, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20000184 	.word	0x20000184

08005600 <_init>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr

0800560c <_fini>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr
